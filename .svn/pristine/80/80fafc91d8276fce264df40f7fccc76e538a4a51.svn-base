'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersJs = require('../helpers.js');

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var apkUtilsMethods = {};

/**
 * Check whether the particular package is present on the device under test.
 *
 * @param {string} pkg - The name of the package to check.
 * @return {boolean} True if the package is installed.
 */
apkUtilsMethods.isAppInstalled = function callee$0$0(pkg) {
  var installed, stdout, apkInstalledRgx;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        installed = false;

        _loggerJs2['default'].debug('Getting install status for ' + pkg);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'list', 'packages', pkg]));

      case 5:
        stdout = context$1$0.sent;
        apkInstalledRgx = new RegExp('^package:' + pkg.replace(/(\.)/g, "\\$1") + '$', 'm');

        installed = apkInstalledRgx.test(stdout);
        _loggerJs2['default'].debug('App is' + (!installed ? ' not' : '') + ' installed');
        return context$1$0.abrupt('return', installed);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error finding if app is installed. Original error: ' + context$1$0.t0.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 12]]);
};

/**
 * Start the particular URI on the device under test.
 *
 * @param {string} uri - The name of URI to start.
 * @param {string} pkg - The name of the package to start the URI with.
 */
apkUtilsMethods.startUri = function callee$0$0(uri, pkg) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!uri || !pkg) {
          _loggerJs2['default'].errorAndThrow("URI and package arguments are required");
        }
        context$1$0.prev = 1;
        args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri.replace(/&/g, '\\&'), pkg];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Error attempting to start URI. Original error: ' + context$1$0.t0);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

/**
 * Start the particular package on the device under test.
 *
 * @param {object} startAppOptions [{}] - Startup options mapping.
 *                                        It is mandatory that 'activity' and 'pkg' properties are set.
 *                                        Additional supported properties are: 'retry', 'stopApp', 'waitPkg'
 *                                        and 'waitActivity'.
 * @return {string} The output of the corresponding adb command.
 */
apkUtilsMethods.startApp = function callee$0$0() {
  var startAppOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var apiLevel, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (!startAppOptions.activity || !startAppOptions.pkg) {
          _loggerJs2['default'].errorAndThrow("activity and pkg is required for launching application");
        }
        startAppOptions = _lodash2['default'].clone(startAppOptions);
        startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');

        // initializing defaults
        _lodash2['default'].defaults(startAppOptions, {
          waitPkg: startAppOptions.pkg,
          waitActivity: false,
          retry: true,
          stopApp: true
        });
        // preventing null waitpkg
        startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 8:
        apiLevel = context$1$0.sent;
        cmd = (0, _helpersJs.buildStartCmd)(startAppOptions, apiLevel);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 12:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Error: Activity class") !== -1 && stdout.indexOf("does not exist") !== -1)) {
          context$1$0.next = 24;
          break;
        }

        if (!(startAppOptions.retry && startAppOptions.activity[0] !== ".")) {
          context$1$0.next = 21;
          break;
        }

        _loggerJs2['default'].debug("We tried to start an activity that doesn't exist, " + "retrying with . prepended to activity");
        startAppOptions.activity = '.' + startAppOptions.activity;
        startAppOptions.retry = false;
        return context$1$0.abrupt('return', this.startApp(startAppOptions));

      case 21:
        _loggerJs2['default'].errorAndThrow("Activity used to start app doesn't exist or cannot be " + "launched! Make sure it exists and is a launchable activity");

      case 22:
        context$1$0.next = 25;
        break;

      case 24:
        if (stdout.indexOf("java.lang.SecurityException") !== -1) {
          // if the app is disabled on a real device it will throw a security exception
          _loggerJs2['default'].errorAndThrow("Permission to start activity denied.");
        }

      case 25:
        if (!startAppOptions.waitActivity) {
          context$1$0.next = 28;
          break;
        }

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration));

      case 28:
        context$1$0.next = 33;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error occured while starting App. Original error: ' + context$1$0.t0.message);

      case 33:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 30]]);
};

/**
 * @typedef {Object} PackageActivityInfo
 * @property {?string} appPackage - The name of application package,
 *                                  for example 'com.acme.app'.
 * @property {?string} appActivity - The name of main application activity.
 */

/**
 * Get the name of currently focused package and activity.
 *
 * @return {PackageActivityInfo} The mapping, where property names are 'appPackage' and 'appActivity'.
 * @throws {Error} If there is an error while parsing the data.
 */
apkUtilsMethods.getFocusedPackageAndActivity = function callee$0$0() {
  var cmd, nullRe, searchRe, stdout, foundNullMatch, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, foundMatch;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Getting focused package and activity");
        cmd = ['dumpsys', 'window', 'windows'];
        nullRe = new RegExp(/mFocusedApp=null/);
        searchRe = new RegExp('mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 7:
        stdout = context$1$0.sent;
        foundNullMatch = false;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(stdout.split("\n"));

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 25;
          break;
        }

        line = _step.value;
        foundMatch = searchRe.exec(line);

        if (!foundMatch) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: foundMatch[1].trim(), appActivity: foundMatch[2].trim() });

      case 21:
        if (nullRe.test(line)) {
          foundNullMatch = true;
        }

      case 22:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 25:
        context$1$0.next = 31;
        break;

      case 27:
        context$1$0.prev = 27;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 31:
        context$1$0.prev = 31;
        context$1$0.prev = 32;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 34:
        context$1$0.prev = 34;

        if (!_didIteratorError) {
          context$1$0.next = 37;
          break;
        }

        throw _iteratorError;

      case 37:
        return context$1$0.finish(34);

      case 38:
        return context$1$0.finish(31);

      case 39:
        if (!foundNullMatch) {
          context$1$0.next = 43;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: null, appActivity: null });

      case 43:
        _loggerJs2['default'].errorAndThrow("Could not parse activity from dumpsys");

      case 44:
        context$1$0.next = 49;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t1 = context$1$0['catch'](4);

        _loggerJs2['default'].errorAndThrow('Could not get focusPackageAndActivity. Original error: ' + context$1$0.t1.message);

      case 49:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 46], [12, 27, 31, 39], [32,, 34, 38]]);
};

/**
 * Wait for the given activity to be focused/non-focused.
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {boolean} waitForStop - Whether to wait until the activity is focused (true)
 *                                or is not focused (false).
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */
apkUtilsMethods.waitForActivityOrNot = function callee$0$0(pkg, activity, waitForStop) {
  var waitMs = arguments.length <= 3 || arguments[3] === undefined ? 20000 : arguments[3];

  var splitNames, allPackages, allActivities, possibleActivityNames, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, oneActivity, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, currentPkg, possibleActivityPatterns, retries;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!pkg || !activity)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Package and activity required.');

      case 2:
        _loggerJs2['default'].debug('Waiting up to ' + waitMs + 'ms for activity matching pkg: \'' + pkg + '\' and ' + ('activity: \'' + activity + '\' to' + (waitForStop ? ' not' : '') + ' be focused'));

        splitNames = function splitNames(names) {
          return names.split(',').map(function (name) {
            return name.trim();
          });
        };

        allPackages = splitNames(pkg);
        allActivities = splitNames(activity);
        possibleActivityNames = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 10;
        _iterator2 = _getIterator(allActivities);

      case 12:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 40;
          break;
        }

        oneActivity = _step2.value;

        if (!oneActivity.startsWith('.')) {
          context$1$0.next = 36;
          break;
        }

        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 18;

        // add the package name if activity is not full qualified
        for (_iterator3 = _getIterator(allPackages); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          currentPkg = _step3.value;

          possibleActivityNames.push(('' + currentPkg + oneActivity).replace(/\.+/g, '.'));
        }
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError3) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError3;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        context$1$0.next = 37;
        break;

      case 36:
        // accept fully qualified activity name.
        possibleActivityNames.push(oneActivity);

      case 37:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 12;
        break;

      case 40:
        context$1$0.next = 46;
        break;

      case 42:
        context$1$0.prev = 42;
        context$1$0.t1 = context$1$0['catch'](10);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t1;

      case 46:
        context$1$0.prev = 46;
        context$1$0.prev = 47;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 49:
        context$1$0.prev = 49;

        if (!_didIteratorError2) {
          context$1$0.next = 52;
          break;
        }

        throw _iteratorError2;

      case 52:
        return context$1$0.finish(49);

      case 53:
        return context$1$0.finish(46);

      case 54:
        /* jshint ignore:start */
        _loggerJs2['default'].debug('Possible activities, to be checked: ' + possibleActivityNames.map(function (name) {
          return '\'' + name + '\'';
        }).join(', '));
        /* jshint ignore:end */
        possibleActivityPatterns = possibleActivityNames.map(function (possibleActivityName) {
          return new RegExp('^' + possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$') + '$');
        });
        retries = parseInt(waitMs / 750, 10) || 1;

        retries = isNaN(retries) ? 30 : retries;
        context$1$0.next = 60;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 750, function callee$1$0() {
          var _ref, appPackage, appActivity, _ret;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.getFocusedPackageAndActivity());

              case 2:
                _ref = context$2$0.sent;
                appPackage = _ref.appPackage;
                appActivity = _ref.appActivity;

                if (!(appActivity && appPackage)) {
                  context$2$0.next = 9;
                  break;
                }

                _ret = (function () {
                  var fullyQualifiedActivity = appActivity.startsWith('.') ? '' + appPackage + appActivity : appActivity;
                  _loggerJs2['default'].debug('Found package: \'' + appPackage + '\' and fully qualified activity name : \'' + fullyQualifiedActivity + '\'');
                  var foundAct = _lodash2['default'].includes(allPackages, appPackage) && _lodash2['default'].findIndex(possibleActivityPatterns, function (possiblePattern) {
                    return possiblePattern.test(fullyQualifiedActivity);
                  }) !== -1;
                  if (!waitForStop && foundAct || waitForStop && !foundAct) {
                    return {
                      v: undefined
                    };
                  }
                })();

                if (!(typeof _ret === 'object')) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', _ret.v);

              case 9:
                _loggerJs2['default'].debug('Incorrect package and activity. Retrying.');
                /* jshint ignore:start */
                throw new Error(possibleActivityNames.map(function (name) {
                  return '\'' + name + '\'';
                }).join(' or ') + ' never ' + (waitForStop ? 'stopped' : 'started'));

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 60:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 42, 46, 54], [18, 22, 26, 34], [27,, 29, 33], [47,, 49, 53]]);
};

/**
 * Wait for the given activity to be focused
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */

/* jshint ignore:end */
apkUtilsMethods.waitForActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, false, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Wait for the given activity to be non-focused.
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */
apkUtilsMethods.waitForNotActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, true, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} UninstallOptions
 * @property {number} timeout [20000] - The count of milliseconds to wait until the
 *                                      app is uninstalled.
 * @property {boolean} keepData [false] - Set to true in order to keep the
 *                                        application data and cache folders after uninstall.
 */

var APK_UNINSTALL_TIMEOUT = 20000;

/**
 * Uninstall the given package from the device under test.
 *
 * @param {string} pkg - The name of the package to be uninstalled.
 * @param {?UninstallOptions} options - The set of uninstallation options.
 * @return {boolean} True if the package was found on the device and
 *                   successfully uninstalled.
 */
apkUtilsMethods.uninstallApk = function callee$0$0(pkg) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var timeout, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Uninstalling ' + pkg);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.isAppInstalled(pkg));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].info(pkg + ' was not uninstalled, because it was not present on the device');
        return context$1$0.abrupt('return', false);

      case 6:
        timeout = APK_UNINSTALL_TIMEOUT;

        if (_appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout)) {
          timeout = parseInt(options.timeout, 10);
        }
        cmd = ['uninstall'];

        if (options.keepData) {
          cmd.push('-k');
        }
        cmd.push(pkg);

        stdout = undefined;
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.adbExec(cmd, { timeout: timeout }));

      case 17:
        stdout = context$1$0.sent.trim();
        context$1$0.next = 23;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](12);

        _loggerJs2['default'].errorAndThrow('Unable to uninstall APK. Original error: ' + context$1$0.t0.message);

      case 23:
        _loggerJs2['default'].debug('\'adb ' + cmd.join(' ') + '\' command output: ' + stdout);

        if (!stdout.includes("Success")) {
          context$1$0.next = 27;
          break;
        }

        _loggerJs2['default'].info(pkg + ' was successfully uninstalled');
        return context$1$0.abrupt('return', true);

      case 27:
        _loggerJs2['default'].info(pkg + ' was not uninstalled');
        return context$1$0.abrupt('return', false);

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[12, 20]]);
};

/**
 * Install the package after it was pushed to the device under test.
 *
 * @param {string} apkPathOnDevice - The full path to the package on the device file system.
 * @param {object} opts [{}] - Additional exec options. See {@link https://github.com/appium/node-teen_process}
 *                             for more details on this parameter.
 * @throws {error} If there was a failure during application install.
 */
apkUtilsMethods.installFromDevicePath = function callee$0$0(apkPathOnDevice) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'install', '-r', apkPathOnDevice], opts));

      case 2:
        stdout = context$1$0.sent;

        if (stdout.indexOf("Failure") !== -1) {
          _loggerJs2['default'].errorAndThrow('Remote install failed: ' + stdout);
        }

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

var APK_INSTALL_TIMEOUT = 60000;

/**
 * @typedef {Object} InstallOptions
 * @property {number} timeout [60000] - The count of milliseconds to wait until the
 *                                      app is installed.
 * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
 *                                                 packages installation.
 * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
 *                                         instead of the device memory.
 * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
 *                                                permissions requested in the application's manifest
 *                                                automatically after the installation is completed
 *                                                under Android 6+.
 * @property {boolean} replace [true] - Set it to false if you don't want
 *                                      the application to be upgraded/reinstalled
 *                                      if it is already present on the device.
 */

/**
 * Install the package from the local file system.
 *
 * @param {string} apk - The full path to the local package.
 * @param {boolean} repalce [true] - Whether to replace the package if it
 *                                   already installed. True by default.
 * @param {?InstallOptions} options - The set of installation options.
 * @throws {error} If an unexpected error happens during install.
 */
apkUtilsMethods.install = function callee$0$0(apk) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var timeout, additionalArgs, apiLevel, output;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(options.replace)) {
          options.replace = true;
        }
        timeout = APK_INSTALL_TIMEOUT;

        if (_appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout)) {
          timeout = parseInt(options.timeout, 10);
        }

        additionalArgs = [];

        if (options.allowTestPackages) {
          additionalArgs.push('-t');
        }
        if (options.useSdcard) {
          additionalArgs.push('-s');
        }

        if (!options.grantPermissions) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;

        if (apiLevel < 23) {
          _loggerJs2['default'].debug('Skipping granting permissions for \'' + apk + '\', since ' + ('the current API level ' + apiLevel + ' does not support applications ') + 'permissions customization');
        } else {
          additionalArgs.push('-g');
        }

      case 11:
        if (!options.replace) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.adbExec(['install', '-r'].concat(additionalArgs, [apk]), { timeout: timeout }));

      case 14:
        output = context$1$0.sent;

        _loggerJs2['default'].debug('Install command stdout: ' + output);
        context$1$0.next = 30;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.adbExec(['install'].concat(additionalArgs, [apk]), { timeout: timeout }));

      case 21:
        output = context$1$0.sent;

        _loggerJs2['default'].debug('Install command stdout: ' + output);
        context$1$0.next = 30;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](18);

        if (context$1$0.t0.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
          context$1$0.next = 29;
          break;
        }

        throw context$1$0.t0;

      case 29:
        _loggerJs2['default'].debug('Application \'' + apk + '\' already installed. Continuing.');

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 25]]);
};

/**
 * @typedef {Object} InstallOrUpgradeOptions
 * @property {number} timeout [60000] - The count of milliseconds to wait until the
 *                                      app is installed.
 * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
 *                                                 packages installation.
 * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
 *                                         instead of the device memory.
 * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
 *                                                permissions requested in the application's manifest
 *                                                automatically after the installation is completed
 *                                                under Android 6+.
 */

/**
 * Install the package from the local file system of upgrade it if an older
 * version of the same package is already installed.
 *
 * @param {string} apk - The full path to the local package.
 * @param {?string} pkg - The name of the installed package. The method will
 *                        perform faster if it is set.
 * @param {?InstallOrUpgradeOptions} options - Set of install options.
 * @throws {error} If an unexpected error happens during install.
 */
apkUtilsMethods.installOrUpgrade = function callee$0$0(apk) {
  var pkg = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var apkInfo, _ref2, pkgVersionCode, pkgVersionNameStr, pkgVersionName, _apkInfo, apkVersionCode, apkVersionNameStr, apkVersionName;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(options.timeout)) {
          options.timeout = APK_INSTALL_TIMEOUT;
        }

        apkInfo = null;

        if (pkg) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 5:
        apkInfo = context$1$0.sent;

        pkg = apkInfo.name;

      case 7:
        if (pkg) {
          context$1$0.next = 10;
          break;
        }

        _loggerJs2['default'].warn('Cannot read the package name of ' + apk + '. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.isAppInstalled(pkg));

      case 12:
        if (context$1$0.sent) {
          context$1$0.next = 17;
          break;
        }

        _loggerJs2['default'].debug('App \'' + apk + '\' not installed. Installing');
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: false })));

      case 16:
        return context$1$0.abrupt('return');

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(this.getPackageInfo(pkg));

      case 19:
        _ref2 = context$1$0.sent;
        pkgVersionCode = _ref2.versionCode;
        pkgVersionNameStr = _ref2.versionName;
        pkgVersionName = _semver2['default'].valid(_semver2['default'].coerce(pkgVersionNameStr));

        if (apkInfo) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 26:
        apkInfo = context$1$0.sent;

      case 27:
        _apkInfo = apkInfo;
        apkVersionCode = _apkInfo.versionCode;
        apkVersionNameStr = _apkInfo.versionName;
        apkVersionName = _semver2['default'].valid(_semver2['default'].coerce(apkVersionNameStr));

        if (!(!_lodash2['default'].isNumber(apkVersionCode) || !_lodash2['default'].isNumber(pkgVersionCode))) {
          context$1$0.next = 36;
          break;
        }

        _loggerJs2['default'].warn('Cannot read version codes of \'' + apk + '\' and/or \'' + pkg + '\'');

        if (!(!_lodash2['default'].isString(apkVersionName) || !_lodash2['default'].isString(pkgVersionName))) {
          context$1$0.next = 36;
          break;
        }

        _loggerJs2['default'].warn('Cannot read version names of \'' + apk + '\' and/or \'' + pkg + '\'. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 36:
        if (!(_lodash2['default'].isNumber(apkVersionCode) && _lodash2['default'].isNumber(pkgVersionCode) && pkgVersionCode > apkVersionCode)) {
          context$1$0.next = 39;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (' + pkgVersionCode + ' > ' + apkVersionCode + ')');
        return context$1$0.abrupt('return');

      case 39:
        if (!(_lodash2['default'].isString(apkVersionName) && _lodash2['default'].isString(pkgVersionName))) {
          context$1$0.next = 45;
          break;
        }

        if (!_semver2['default'].satisfies(pkgVersionName, '>=' + apkVersionName)) {
          context$1$0.next = 43;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (\'' + pkgVersionName + '\' >= \'' + apkVersionName + '\')');
        return context$1$0.abrupt('return');

      case 43:
        context$1$0.next = 48;
        break;

      case 45:
        if (!(_lodash2['default'].isNumber(apkVersionCode) && _lodash2['default'].isNumber(pkgVersionCode) && pkgVersionCode === apkVersionCode)) {
          context$1$0.next = 48;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (' + pkgVersionCode + ' === ' + apkVersionCode + ')');
        return context$1$0.abrupt('return');

      case 48:

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package is older than \'' + apk + '\' ' + ('(' + pkgVersionCode + ' < ' + apkVersionCode + ' or \'' + pkgVersionName + '\' < \'' + apkVersionName + '\')\'. ') + 'Executing upgrade');
        context$1$0.prev = 49;
        context$1$0.next = 52;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: true })));

      case 52:
        context$1$0.next = 63;
        break;

      case 54:
        context$1$0.prev = 54;
        context$1$0.t0 = context$1$0['catch'](49);

        _loggerJs2['default'].warn('Cannot upgrade \'' + pkg + '\' because of \'' + context$1$0.t0.message + '\'. Trying full reinstall');
        context$1$0.next = 59;
        return _regeneratorRuntime.awrap(this.uninstallApk(pkg));

      case 59:
        if (context$1$0.sent) {
          context$1$0.next = 61;
          break;
        }

        _loggerJs2['default'].errorAndThrow('\'' + pkg + '\' package cannot be uninstalled');

      case 61:
        context$1$0.next = 63;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: false })));

      case 63:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[49, 54]]);
};

/**
 * Extract string resources from the given package on local file system.
 *
 * @param {string} apk - The full path to the local package.
 * @param {string} language - The name of the language to extract the resources for.
 * @param {string} out - The name of the destination folder on the local file system to
 *                       store the extracted file to.
 * @return {object} A mapping object, where properties are: 'apkStrings', containing
 *                  parsed resource file represented as JSON object, and 'localPath',
 *                  containing the path to the extracted file on the local file system.
 */
apkUtilsMethods.extractStringsFromApk = function callee$0$0(apk, language, out) {
  var stringsJson, localPath, apkTools, args, fileData, apkStrings, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Extracting strings for language: ' + (language || "default"));
        stringsJson = 'strings.json';
        localPath = undefined;

        if (language) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 6:
        language = context$1$0.sent;

      case 7:
        apkTools = this.jars['appium_apk_tools.jar'];
        args = ['-jar', apkTools, 'stringsFromApk', apk, out, language];
        fileData = undefined, apkStrings = undefined;
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 13:
        context$1$0.next = 21;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](10);

        _loggerJs2['default'].debug('No strings.xml for language \'' + language + '\', getting default ' + 'strings.xml');
        args.pop();
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 21:
        context$1$0.prev = 21;

        _loggerJs2['default'].debug("Reading strings from converted strings.json");
        localPath = _path2['default'].join(out, stringsJson);
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localPath, 'utf8'));

      case 26:
        fileData = context$1$0.sent;

        apkStrings = JSON.parse(fileData);
        context$1$0.next = 35;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t1 = context$1$0['catch'](21);

        if (fileData) {
          _loggerJs2['default'].debug('Content started with: ' + fileData.slice(0, 300));
        }
        msg = 'Could not parse strings from strings.json. Original ' + ('error: ' + context$1$0.t1.message);

        _loggerJs2['default'].errorAndThrow(msg);

      case 35:
        return context$1$0.abrupt('return', { apkStrings: apkStrings, localPath: localPath });

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 15], [21, 30]]);
};

/**
 * Get the language name of the device under test.
 *
 * @return {string} The name of device language.
 */
apkUtilsMethods.getDeviceLanguage = function callee$0$0() {
  var language;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        language = undefined;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getDeviceSysLanguage());

      case 7:
        language = context$1$0.sent;

        if (language) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getDeviceProductLanguage());

      case 11:
        language = context$1$0.sent;

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 16:
        language = context$1$0.sent.split("-")[0];

      case 17:
        return context$1$0.abrupt('return', language);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the language name of the device under test.
 *
 * @param {string} language - The name of the new device language.
 */
apkUtilsMethods.setDeviceLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLanguage(language));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the country name of the device under test.
 *
 * @return {string} The name of device country.
 */
apkUtilsMethods.getDeviceCountry = function callee$0$0() {
  var country;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysCountry());

      case 2:
        country = context$1$0.sent;

        if (country) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductCountry());

      case 6:
        country = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', country);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the country name of the device under test.
 *
 * @param {string} country - The name of the new device country.
 */
apkUtilsMethods.setDeviceCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysCountry(country));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the locale name of the device under test.
 *
 * @return {string} The name of device locale.
 */
apkUtilsMethods.getDeviceLocale = function callee$0$0() {
  var locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysLocale());

      case 2:
        locale = context$1$0.sent;

        if (locale) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductLocale());

      case 6:
        locale = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', locale);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the locale name of the device under test and the format of the locale is en-US, for example.
 * This method call setDeviceLanguageCountry, so, please use setDeviceLanguageCountry as possible.
 *
 * @param {string} locale - Names of the device language and the country connected with `-`. e.g. en-US.
 */
apkUtilsMethods.setDeviceLocale = function callee$0$0(locale) {
  var validateLocale, split_locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

        if (validateLocale.test(locale)) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLocale requires the following format: en-US or ja-JP');
        return context$1$0.abrupt('return');

      case 4:
        split_locale = locale.split("-");
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.setDeviceLanguageCountry(split_locale[0], split_locale[1]));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Make sure current device locale is expected or not.
 *
 * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
 * @param {string} country - Country. The language field is case insensitive, but Locale always canonicalizes to lower case.
 *
 * @return {boolean} If current locale is language and country as arguments, return true.
 */
apkUtilsMethods.ensureCurrentLocale = function callee$0$0(language, country) {
  var hasLanguage, hasCountry, apiLevel;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hasLanguage = _lodash2['default'].isString(language);
        hasCountry = _lodash2['default'].isString(country);

        if (!(!hasLanguage && !hasCountry)) {
          context$1$0.next = 5;
          break;
        }

        _loggerJs2['default'].warn('ensureCurrentLocale requires language or country');
        return context$1$0.abrupt('return', false);

      case 5:

        // get lower case versions of the strings
        language = (language || '').toLowerCase();
        country = (country || '').toLowerCase();

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 1000, function callee$1$0() {
          var curLanguage, curCountry, curLocale;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;

                if (!(apiLevel < 23)) {
                  context$2$0.next = 19;
                  break;
                }

                curLanguage = undefined, curCountry = undefined;

                if (!hasLanguage) {
                  context$2$0.next = 9;
                  break;
                }

                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(this.getDeviceLanguage());

              case 6:
                curLanguage = context$2$0.sent.toLowerCase();

                if (!(!hasCountry && language === curLanguage)) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 9:
                if (!hasCountry) {
                  context$2$0.next = 15;
                  break;
                }

                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(this.getDeviceCountry());

              case 12:
                curCountry = context$2$0.sent.toLowerCase();

                if (!(!hasLanguage && country === curCountry)) {
                  context$2$0.next = 15;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 15:
                if (!(language === curLanguage && country === curCountry)) {
                  context$2$0.next = 17;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 17:
                context$2$0.next = 24;
                break;

              case 19:
                context$2$0.next = 21;
                return _regeneratorRuntime.awrap(this.getDeviceLocale());

              case 21:
                curLocale = context$2$0.sent.toLowerCase();

                if (!(language + '-' + country === curLocale)) {
                  context$2$0.next = 24;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 24:
                return context$2$0.abrupt('return', false);

              case 27:
                context$2$0.prev = 27;
                context$2$0.t0 = context$2$0['catch'](0);

                // if there has been an error, restart adb and retry
                _loggerJs2['default'].error('Unable to check device localization: ' + context$2$0.t0.message);
                _loggerJs2['default'].debug('Restarting ADB and retrying...');
                context$2$0.next = 33;
                return _regeneratorRuntime.awrap(this.restartAdb());

              case 33:
                throw context$2$0.t0;

              case 34:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2, [[0, 27]]);
        }));

      case 12:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the locale name of the device under test.
 *
 * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
 *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html
 * @param {string} country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.
 *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html
 */
apkUtilsMethods.setDeviceLanguageCountry = function callee$0$0(language, country) {
  var hasLanguage, hasCountry, wasSettingChanged, apiLevel, curLanguage, curCountry, curLocale, locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hasLanguage = language && _lodash2['default'].isString(language);
        hasCountry = country && _lodash2['default'].isString(country);

        if (!(!hasLanguage && !hasCountry)) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLanguageCountry requires language or country.');
        _loggerJs2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 6:
        wasSettingChanged = false;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;

        language = (language || '').toLowerCase();
        country = (country || '').toUpperCase();

        if (!(apiLevel < 23)) {
          context$1$0.next = 29;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 15:
        curLanguage = context$1$0.sent.toLowerCase();
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getDeviceCountry());

      case 18:
        curCountry = context$1$0.sent.toUpperCase();

        if (!(hasLanguage && language !== curLanguage)) {
          context$1$0.next = 23;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.setDeviceLanguage(language));

      case 22:
        wasSettingChanged = true;

      case 23:
        if (!(hasCountry && country !== curCountry)) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.setDeviceCountry(country));

      case 26:
        wasSettingChanged = true;

      case 27:
        context$1$0.next = 50;
        break;

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 31:
        curLocale = context$1$0.sent;

        if (!(apiLevel === 23)) {
          context$1$0.next = 42;
          break;
        }

        locale = undefined;

        if (!hasCountry) {
          locale = language;
        } else if (!hasLanguage) {
          locale = country;
        } else {
          locale = language + '-' + country;
        }

        _loggerJs2['default'].debug('Current locale: \'' + curLocale + '\'; requested locale: \'' + locale + '\'');

        if (!(locale.toLowerCase() !== curLocale.toLowerCase())) {
          context$1$0.next = 40;
          break;
        }

        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocale(locale));

      case 39:
        wasSettingChanged = true;

      case 40:
        context$1$0.next = 50;
        break;

      case 42:
        if (!(!hasCountry || !hasLanguage)) {
          context$1$0.next = 46;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLanguageCountry requires both language and country to be set for API 24+');
        _loggerJs2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 46:

        _loggerJs2['default'].debug('Current locale: \'' + curLocale + '\'; requested locale: \'' + language + '-' + country + '\'');

        if (!((language + '-' + country).toLowerCase() !== curLocale.toLowerCase())) {
          context$1$0.next = 50;
          break;
        }

        context$1$0.next = 50;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocaleViaSettingApp(language, country));

      case 50:
        if (!wasSettingChanged) {
          context$1$0.next = 54;
          break;
        }

        _loggerJs2['default'].info("Rebooting the device in order to apply new locale via 'setting persist.sys.locale' command.");
        context$1$0.next = 54;
        return _regeneratorRuntime.awrap(this.reboot());

      case 54:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the package name from local apk file.
 *
 * @param {string} apk - The full path to existing .apk package on the local
 *                       file system.
 * @return {string} The parsed package name or _null_ if it cannot be parsed.
 */
apkUtilsMethods.getPackageName = function callee$0$0(apk) {
  var args, _ref3, stdout, apkPackage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['dump', 'badging', apk];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 5:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (apkPackage && apkPackage.length >= 2) {
          apkPackage = apkPackage[1];
        } else {
          apkPackage = null;
        }
        return context$1$0.abrupt('return', apkPackage);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Objcet} AppInfo
 * @property {string} name - Package name, for example 'com.acme.app'.
 * @property {number} versionCode - Version code.
 * @property {string} versionName - Version name, for example '1.0'.
 */

/**
 * Get the package info from local apk file.
 *
 * @param {string} apkPath - The full path to existing .apk package on the local
 *                           file system.
 * @return {?AppInfo} The parsed application information.
 */
apkUtilsMethods.getApkInfo = function callee$0$0(apkPath) {
  var _ref4, stdout, matches;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apkPath));

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].errorAndThrow('The file at path ' + apkPath + ' does not exist or is not accessible');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 6:
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', apkPath]));

      case 9:
        _ref4 = context$1$0.sent;
        stdout = _ref4.stdout;
        matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

        if (!matches) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        });

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](6);

        _loggerJs2['default'].warn('Error "' + context$1$0.t0.message + '" while getting badging info');

      case 19:
        return context$1$0.abrupt('return', {});

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 16]]);
};

/**
 * Get the package info from the installed application.
 *
 * @param {string} pkg - The name of the installed package.
 * @return {?AppInfo} The parsed application information.
 */
apkUtilsMethods.getPackageInfo = function callee$0$0(pkg) {
  var result, stdout, versionNameMatch, versionCodeMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Getting package info for ' + pkg);
        result = { name: pkg };
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'package', pkg]));

      case 5:
        stdout = context$1$0.sent;
        versionNameMatch = new RegExp(/versionName=([\d+\.]+)/).exec(stdout);

        if (versionNameMatch) {
          result.versionName = versionNameMatch[1];
        }
        versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

        if (versionCodeMatch) {
          result.versionCode = parseInt(versionCodeMatch[1], 10);
        }
        return context$1$0.abrupt('return', result);

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](2);

        _loggerJs2['default'].warn('Error "' + context$1$0.t0.message + '" while dumping package info');

      case 16:
        return context$1$0.abrupt('return', result);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 13]]);
};

exports['default'] = apkUtilsMethods;
module.exports = exports['default'];
// https://regex101.com/r/xZ8vF7/1

// figure out the number of retries. Try once if waitMs is less that 750
// 30 times if parsing is not possible

// on some systems this will throw an error if the app already
// exists

// Check version names in case if version codes are not being updated properly

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API >= 23
// API >= 24
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7eUJBQThCLGVBQWU7OzRCQUN4QixjQUFjOzt3QkFDbkIsY0FBYzs7OztvQkFDYixNQUFNOzs7O3NCQUNULFFBQVE7Ozs7d0JBQ1EsVUFBVTs7NkJBQ2YsZ0JBQWdCOztzQkFDdEIsUUFBUTs7OztBQUUzQixJQUFJLGVBQWUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUXpCLGVBQWUsQ0FBQyxjQUFjLEdBQUcsb0JBQWdCLEdBQUc7TUFFNUMsU0FBUyxFQUVULE1BQU0sRUFDTixlQUFlOzs7OztBQUhmLGlCQUFTLEdBQUcsS0FBSzs7QUFDckIsOEJBQUksS0FBSyxpQ0FBK0IsR0FBRyxDQUFHLENBQUM7O3lDQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7OztBQUExRCxjQUFNO0FBQ04sdUJBQWUsR0FBRyxJQUFJLE1BQU0sZUFBYSxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBSyxHQUFHLENBQUM7O0FBQ2xGLGlCQUFTLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6Qyw4QkFBSSxLQUFLLGFBQVUsQ0FBQyxTQUFTLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQSxnQkFBYSxDQUFDOzRDQUNsRCxTQUFTOzs7Ozs7QUFFaEIsOEJBQUksYUFBYSx5REFBdUQsZUFBRSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUV4RixDQUFDOzs7Ozs7OztBQVFGLGVBQWUsQ0FBQyxRQUFRLEdBQUcsb0JBQWdCLEdBQUcsRUFBRSxHQUFHO01BSzNDLElBQUk7Ozs7QUFKVixZQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ2hCLGdDQUFJLGFBQWEsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1NBQzdEOztBQUVLLFlBQUksR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSw0QkFBNEIsRUFBRSxJQUFJLEVBQzdELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQzs7eUNBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7O0FBRXRCLDhCQUFJLGFBQWEsb0VBQXVELENBQUM7Ozs7Ozs7Q0FFNUUsQ0FBQzs7Ozs7Ozs7Ozs7QUFXRixlQUFlLENBQUMsUUFBUSxHQUFHO01BQWdCLGVBQWUseURBQUcsRUFBRTtNQWlCdkQsUUFBUSxFQUNSLEdBQUcsRUFDSCxNQUFNOzs7Ozs7QUFqQlYsWUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQ3JELGdDQUFJLGFBQWEsQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO1NBQzdFO0FBQ0QsdUJBQWUsR0FBRyxvQkFBRSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDM0MsdUJBQWUsQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDOzs7QUFHeEUsNEJBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRTtBQUMxQixpQkFBTyxFQUFFLGVBQWUsQ0FBQyxHQUFHO0FBQzVCLHNCQUFZLEVBQUUsS0FBSztBQUNuQixlQUFLLEVBQUUsSUFBSTtBQUNYLGlCQUFPLEVBQUUsSUFBSTtTQUNkLENBQUMsQ0FBQzs7QUFFSCx1QkFBZSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUM7O3lDQUNwRCxJQUFJLENBQUMsV0FBVyxFQUFFOzs7QUFBbkMsZ0JBQVE7QUFDUixXQUFHLEdBQUcsOEJBQWMsZUFBZSxFQUFFLFFBQVEsQ0FBQzs7eUNBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7QUFBOUIsY0FBTTs7Y0FDTixNQUFNLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQzlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTs7Ozs7Y0FDckMsZUFBZSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQTs7Ozs7QUFDOUQsOEJBQUksS0FBSyxDQUFDLG9EQUFvRCxHQUNwRCx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ25ELHVCQUFlLENBQUMsUUFBUSxTQUFPLGVBQWUsQ0FBQyxRQUFRLEFBQUUsQ0FBQztBQUMxRCx1QkFBZSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7NENBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDOzs7QUFFckMsOEJBQUksYUFBYSxDQUFDLHdEQUF3RCxHQUN4RCw0REFBNEQsQ0FBQyxDQUFDOzs7Ozs7O0FBRTdFLFlBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOztBQUUvRCxnQ0FBSSxhQUFhLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDs7O2FBQ0csZUFBZSxDQUFDLFlBQVk7Ozs7Ozt5Q0FDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxZQUFZLEVBQ3JELGVBQWUsQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7Ozs7QUFHMUQsOEJBQUksYUFBYSx3REFBc0QsZUFBRSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUV2RixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUFlRixlQUFlLENBQUMsNEJBQTRCLEdBQUc7TUFFekMsR0FBRyxFQUNILE1BQU0sRUFDTixRQUFRLEVBR04sTUFBTSxFQUNOLGNBQWMsa0ZBQ1QsSUFBSSxFQUNQLFVBQVU7Ozs7O0FBVGxCLDhCQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlDLFdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO0FBQ3RDLGNBQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztBQUN2QyxnQkFBUSxHQUFHLElBQUksTUFBTSxDQUFDLDRDQUE0QyxHQUM1QyxpREFBaUQsQ0FBQzs7O3lDQUV2RCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7O0FBQTlCLGNBQU07QUFDTixzQkFBYyxHQUFHLEtBQUs7Ozs7O2lDQUNULE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzs7Ozs7OztBQUExQixZQUFJO0FBQ1Asa0JBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7YUFDaEMsVUFBVTs7Ozs7NENBQ0wsRUFBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUM7OztBQUN2RSxZQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDNUIsd0JBQWMsR0FBRyxJQUFJLENBQUM7U0FDdkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUVDLGNBQWM7Ozs7OzRDQUNULEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFDOzs7QUFFNUMsOEJBQUksYUFBYSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFHN0QsOEJBQUksYUFBYSw2REFBMkQsZUFBRSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUU1RixDQUFDOzs7Ozs7Ozs7Ozs7O0FBYUYsZUFBZSxDQUFDLG9CQUFvQixHQUFHLG9CQUFnQixHQUFHLEVBQUUsUUFBUSxFQUFFLFdBQVc7TUFBRSxNQUFNLHlEQUFHLEtBQUs7O01BT3pGLFVBQVUsRUFFVixXQUFXLEVBQ1gsYUFBYSxFQUVmLHFCQUFxQix1RkFDaEIsV0FBVyx1RkFHUCxVQUFVLEVBV25CLHdCQUF3QixFQU14QixPQUFPOzs7Ozs7O2NBaENQLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFBOzs7OztjQUNiLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDOzs7QUFFbkQsOEJBQUksS0FBSyxDQUFDLG1CQUFpQixNQUFNLHdDQUFrQyxHQUFHLGlDQUM5QyxRQUFRLGNBQU8sV0FBVyxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQUEsaUJBQWEsQ0FBQyxDQUFDOztBQUV6RSxrQkFBVSxHQUFHLFNBQWIsVUFBVSxDQUFJLEtBQUs7aUJBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO21CQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7V0FBQSxDQUFDO1NBQUE7O0FBRW5FLG1CQUFXLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztBQUM3QixxQkFBYSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUM7QUFFdEMsNkJBQXFCLEdBQUcsRUFBRTs7Ozs7a0NBQ04sYUFBYTs7Ozs7Ozs7QUFBNUIsbUJBQVc7O2FBQ2QsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7Ozs7O0FBRTdCLHVDQUF1QixXQUFXLHlHQUFFO0FBQTNCLG9CQUFVOztBQUNqQiwrQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBRyxVQUFVLEdBQUcsV0FBVyxFQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdELDZCQUFxQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUk1Qyw4QkFBSSxLQUFLLDBDQUF3QyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO3dCQUFTLElBQUk7U0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFHLENBQUM7O0FBRTVHLGdDQUF3QixHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxVQUFDLG9CQUFvQjtpQkFDNUUsSUFBSSxNQUFNLE9BQUssb0JBQW9CLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQUk7U0FBQSxDQUMxRztBQUlHLGVBQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDOztBQUM3QyxlQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUM7O3lDQUNsQyw2QkFBYyxPQUFPLEVBQUUsR0FBRyxFQUFFO29CQUMzQixVQUFVLEVBQUUsV0FBVzs7Ozs7O2lEQUFVLElBQUksQ0FBQyw0QkFBNEIsRUFBRTs7OztBQUFwRSwwQkFBVSxRQUFWLFVBQVU7QUFBRSwyQkFBVyxRQUFYLFdBQVc7O3NCQUN4QixXQUFXLElBQUksVUFBVSxDQUFBOzs7Ozs7QUFDM0Isc0JBQUksc0JBQXNCLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBTSxVQUFVLEdBQUcsV0FBVyxHQUFLLFdBQVcsQ0FBQztBQUN2Ryx3Q0FBSSxLQUFLLHVCQUFvQixVQUFVLGlEQUEwQyxzQkFBc0IsUUFBSSxDQUFDO0FBQzVHLHNCQUFJLFFBQVEsR0FBSSxvQkFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxJQUNuQyxvQkFBRSxTQUFTLENBQUMsd0JBQXdCLEVBQUUsVUFBQyxlQUFlOzJCQUFLLGVBQWUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7bUJBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUFDLENBQUM7QUFDakksc0JBQUksQUFBQyxDQUFDLFdBQVcsSUFBSSxRQUFRLElBQU0sV0FBVyxJQUFJLENBQUMsUUFBUSxBQUFDLEVBQUU7QUFDNUQ7O3NCQUFPO21CQUNSOzs7Ozs7Ozs7OztBQUVILHNDQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDOztzQkFFakQsSUFBSSxLQUFLLENBQUkscUJBQXFCLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSTtnQ0FBUyxJQUFJO2lCQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFVLFdBQVcsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFBLENBQUc7Ozs7Ozs7U0FFakksQ0FBQzs7Ozs7OztDQUNILENBQUM7Ozs7Ozs7Ozs7Ozs7QUFXRixlQUFlLENBQUMsZUFBZSxHQUFHLG9CQUFnQixHQUFHLEVBQUUsR0FBRztNQUFFLE1BQU0seURBQUcsS0FBSzs7Ozs7eUNBQ2xFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7Ozs7Ozs7Q0FDekQsQ0FBQzs7Ozs7Ozs7Ozs7QUFXRixlQUFlLENBQUMsa0JBQWtCLEdBQUcsb0JBQWdCLEdBQUcsRUFBRSxHQUFHO01BQUUsTUFBTSx5REFBRyxLQUFLOzs7Ozt5Q0FDckUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQzs7Ozs7OztDQUN4RCxDQUFDOzs7Ozs7Ozs7O0FBVUYsSUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7Ozs7QUFVcEMsZUFBZSxDQUFDLFlBQVksR0FBRyxvQkFBZ0IsR0FBRztNQUFFLE9BQU8seURBQUcsRUFBRTtNQU8xRCxPQUFPLEVBSUwsR0FBRyxFQU1MLE1BQU07Ozs7QUFoQlYsOEJBQUksS0FBSyxtQkFBaUIsR0FBRyxDQUFHLENBQUM7O3lDQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQzs7Ozs7Ozs7QUFDakMsOEJBQUksSUFBSSxDQUFJLEdBQUcsb0VBQWlFLENBQUM7NENBQzFFLEtBQUs7OztBQUdWLGVBQU8sR0FBRyxxQkFBcUI7O0FBQ25DLFlBQUksb0JBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0QsaUJBQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QztBQUNLLFdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQzs7QUFDekIsWUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO0FBQ3BCLGFBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEI7QUFDRCxXQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUVWLGNBQU07Ozt5Q0FFRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzs7Ozt5Q0FDVCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBUCxPQUFPLEVBQUMsQ0FBQzs7O0FBQTVDLGNBQU0sb0JBQXdDLElBQUk7Ozs7Ozs7O0FBRWxELDhCQUFJLGFBQWEsK0NBQTZDLGVBQUUsT0FBTyxDQUFHLENBQUM7OztBQUU3RSw4QkFBSSxLQUFLLFlBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsMkJBQXFCLE1BQU0sQ0FBRyxDQUFDOzthQUMxRCxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQzs7Ozs7QUFDNUIsOEJBQUksSUFBSSxDQUFJLEdBQUcsbUNBQWdDLENBQUM7NENBQ3pDLElBQUk7OztBQUViLDhCQUFJLElBQUksQ0FBSSxHQUFHLDBCQUF1QixDQUFDOzRDQUNoQyxLQUFLOzs7Ozs7O0NBQ2IsQ0FBQzs7Ozs7Ozs7OztBQVVGLGVBQWUsQ0FBQyxxQkFBcUIsR0FBRyxvQkFBZ0IsZUFBZTtNQUFFLElBQUkseURBQUcsRUFBRTtNQUM1RSxNQUFNOzs7Ozt5Q0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDOzs7QUFBekUsY0FBTTs7QUFDVixZQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDcEMsZ0NBQUksYUFBYSw2QkFBMkIsTUFBTSxDQUFHLENBQUM7U0FDdkQ7Ozs7Ozs7Q0FDRixDQUFDOztBQUVGLElBQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJsQyxlQUFlLENBQUMsT0FBTyxHQUFHLG9CQUFnQixHQUFHO01BQUUsT0FBTyx5REFBRyxFQUFFO01BSXJELE9BQU8sRUFLTCxjQUFjLEVBUVosUUFBUSxFQWVOLE1BQU07Ozs7QUEvQmhCLFlBQUksQ0FBQyxvQkFBSyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ25DLGlCQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN4QjtBQUNHLGVBQU8sR0FBRyxtQkFBbUI7O0FBQ2pDLFlBQUksb0JBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0QsaUJBQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6Qzs7QUFFSyxzQkFBYyxHQUFHLEVBQUU7O0FBQ3pCLFlBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFO0FBQzdCLHdCQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO0FBQ0QsWUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO0FBQ3JCLHdCQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCOzthQUNHLE9BQU8sQ0FBQyxnQkFBZ0I7Ozs7Ozt5Q0FDSCxJQUFJLENBQUMsV0FBVyxFQUFFOzs7QUFBbkMsZ0JBQVE7O0FBQ2QsWUFBSSxRQUFRLEdBQUcsRUFBRSxFQUFFO0FBQ2pCLGdDQUFJLEtBQUssQ0FBQyx5Q0FBc0MsR0FBRyw4Q0FDaEIsUUFBUSxxQ0FBaUMsOEJBQ3ZDLENBQUMsQ0FBQztTQUN4QyxNQUFNO0FBQ0wsd0JBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7OzthQUdDLE9BQU8sQ0FBQyxPQUFPOzs7Ozs7eUNBQ0ksSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxTQUFLLGNBQWMsR0FBRSxHQUFHLElBQUcsRUFBQyxPQUFPLEVBQVAsT0FBTyxFQUFDLENBQUM7OztBQUFqRixjQUFNOztBQUNaLDhCQUFJLEtBQUssOEJBQTRCLE1BQU0sQ0FBRyxDQUFDOzs7Ozs7O3lDQUd4QixJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsU0FBSyxjQUFjLEdBQUUsR0FBRyxJQUFHLEVBQUMsT0FBTyxFQUFQLE9BQU8sRUFBQyxDQUFDOzs7QUFBM0UsY0FBTTs7QUFDWiw4QkFBSSxLQUFLLDhCQUE0QixNQUFNLENBQUcsQ0FBQzs7Ozs7Ozs7WUFJMUMsZUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDOzs7Ozs7OztBQUcxRCw4QkFBSSxLQUFLLG9CQUFpQixHQUFHLHVDQUFtQyxDQUFDOzs7Ozs7O0NBR3RFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJGLGVBQWUsQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBZ0IsR0FBRztNQUFFLEdBQUcseURBQUcsSUFBSTtNQUFFLE9BQU8seURBQUcsRUFBRTs7TUFLMUUsT0FBTyxTQWdCUSxjQUFjLEVBQWMsaUJBQWlCLEVBQzFELGNBQWMsWUFJRCxjQUFjLEVBQWMsaUJBQWlCLEVBQzFELGNBQWM7Ozs7O0FBMUJwQixZQUFJLENBQUMsb0JBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNuQyxpQkFBTyxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQztTQUN2Qzs7QUFFRyxlQUFPLEdBQUcsSUFBSTs7WUFDYixHQUFHOzs7Ozs7eUNBQ1UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7OztBQUFwQyxlQUFPOztBQUNQLFdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDOzs7WUFFaEIsR0FBRzs7Ozs7QUFDTiw4QkFBSSxJQUFJLHNDQUFvQyxHQUFHLHlEQUFzRCxDQUFDOzs7Ozt5Q0FJN0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7O0FBQ2pDLDhCQUFJLEtBQUssWUFBUyxHQUFHLGtDQUE4QixDQUFDOzt5Q0FDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7Ozs7Ozs7eUNBSUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7Ozs7QUFBL0Usc0JBQWMsU0FBMUIsV0FBVztBQUE2Qix5QkFBaUIsU0FBN0IsV0FBVztBQUN4QyxzQkFBYyxHQUFHLG9CQUFPLEtBQUssQ0FBQyxvQkFBTyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7WUFDaEUsT0FBTzs7Ozs7O3lDQUNNLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDOzs7QUFBcEMsZUFBTzs7O21CQUUyRCxPQUFPO0FBQXhELHNCQUFjLFlBQTFCLFdBQVc7QUFBNkIseUJBQWlCLFlBQTdCLFdBQVc7QUFDeEMsc0JBQWMsR0FBRyxvQkFBTyxLQUFLLENBQUMsb0JBQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O2NBRWpFLENBQUMsb0JBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFBOzs7OztBQUM1RCw4QkFBSSxJQUFJLHFDQUFrQyxHQUFHLG9CQUFhLEdBQUcsUUFBSSxDQUFDOztjQUM5RCxDQUFDLG9CQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTs7Ozs7QUFDNUQsOEJBQUksSUFBSSxxQ0FBa0MsR0FBRyxvQkFBYSxHQUFHLDJEQUF1RCxDQUFDOzs7O2NBSXJILG9CQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxvQkFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQTs7Ozs7QUFDN0YsOEJBQUksS0FBSyxzQkFBbUIsR0FBRyw2Q0FBdUMsY0FBYyxXQUFNLGNBQWMsT0FBSSxDQUFDOzs7O2NBSTNHLG9CQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxvQkFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUE7Ozs7O2FBQ3RELG9CQUFPLFNBQVMsQ0FBQyxjQUFjLFNBQU8sY0FBYyxDQUFHOzs7OztBQUN6RCw4QkFBSSxLQUFLLHNCQUFtQixHQUFHLCtDQUF3QyxjQUFjLGdCQUFTLGNBQWMsU0FBSyxDQUFDOzs7Ozs7OztjQUczRyxvQkFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksb0JBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLGNBQWMsS0FBSyxjQUFjLENBQUE7Ozs7O0FBQ3RHLDhCQUFJLEtBQUssc0JBQW1CLEdBQUcsNkNBQXVDLGNBQWMsYUFBUSxjQUFjLE9BQUksQ0FBQzs7Ozs7QUFJakgsOEJBQUksS0FBSyxDQUFDLHFCQUFrQixHQUFHLG1DQUE0QixHQUFHLGtCQUNoRCxjQUFjLFdBQU0sY0FBYyxjQUFRLGNBQWMsZUFBUSxjQUFjLGFBQU8sc0JBQ3RFLENBQUMsQ0FBQzs7O3lDQUV2QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxlQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQzs7Ozs7Ozs7OztBQUVwRSw4QkFBSSxJQUFJLHVCQUFvQixHQUFHLHdCQUFpQixlQUFJLE9BQU8sK0JBQTJCLENBQUM7O3lDQUM1RSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQzs7Ozs7Ozs7QUFDL0IsOEJBQUksYUFBYSxRQUFLLEdBQUcsc0NBQWtDLENBQUM7Ozs7eUNBRXhELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDOzs7Ozs7O0NBRXhFLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFhRixlQUFlLENBQUMscUJBQXFCLEdBQUcsb0JBQWdCLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRztNQUVwRSxXQUFXLEVBQ1gsU0FBUyxFQUlULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUFFLFVBQVUsRUFtQmxCLEdBQUc7Ozs7QUEzQlQsOEJBQUksS0FBSyx3Q0FBcUMsUUFBUSxJQUFJLFNBQVMsQ0FBQSxDQUFHLENBQUM7QUFDbkUsbUJBQVcsR0FBRyxjQUFjO0FBQzVCLGlCQUFTOztZQUNSLFFBQVE7Ozs7Ozt5Q0FDTSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7OztBQUF6QyxnQkFBUTs7O0FBRU4sZ0JBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO0FBQzVDLFlBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUM7QUFDL0QsZ0JBQVEsY0FBRSxVQUFVOzs7eUNBRWhCLHdCQUFLLE1BQU0sRUFBRSxJQUFJLENBQUM7Ozs7Ozs7Ozs7QUFFeEIsOEJBQUksS0FBSyxDQUFDLG1DQUFnQyxRQUFRLHlDQUMzQixDQUFDLENBQUM7QUFDekIsWUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOzt5Q0FDTCx3QkFBSyxNQUFNLEVBQUUsSUFBSSxDQUFDOzs7OztBQUl4Qiw4QkFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUN6RCxpQkFBUyxHQUFHLGtCQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7O3lDQUN2QixrQkFBRyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQzs7O0FBQS9DLGdCQUFROztBQUNSLGtCQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7Ozs7QUFFbEMsWUFBSSxRQUFRLEVBQUU7QUFDWixnQ0FBSSxLQUFLLDRCQUEwQixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBRyxDQUFDO1NBQzlEO0FBQ0csV0FBRyxHQUFHLHNFQUNVLGVBQUUsT0FBTyxDQUFFOztBQUMvQiw4QkFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs0Q0FFbEIsRUFBQyxVQUFVLEVBQVYsVUFBVSxFQUFFLFNBQVMsRUFBVCxTQUFTLEVBQUM7Ozs7Ozs7Q0FDL0IsQ0FBQzs7Ozs7OztBQU9GLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRztNQUM5QixRQUFROzs7O0FBQVIsZ0JBQVE7O3lDQUNGLElBQUksQ0FBQyxXQUFXLEVBQUU7Ozs7OytCQUFHLEVBQUU7Ozs7Ozt5Q0FDZCxJQUFJLENBQUMsb0JBQW9CLEVBQUU7OztBQUE1QyxnQkFBUTs7WUFDSCxRQUFROzs7Ozs7eUNBQ00sSUFBSSxDQUFDLHdCQUF3QixFQUFFOzs7QUFBaEQsZ0JBQVE7Ozs7Ozs7O3lDQUdRLElBQUksQ0FBQyxlQUFlLEVBQUU7OztBQUF4QyxnQkFBUSxvQkFBa0MsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDOzs7NENBRWpELFFBQVE7Ozs7Ozs7Q0FDaEIsQ0FBQzs7Ozs7OztBQU9GLGVBQWUsQ0FBQyxpQkFBaUIsR0FBRyxvQkFBZ0IsUUFBUTs7Ozs7eUNBRXBELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7Q0FDMUMsQ0FBQzs7Ozs7OztBQU9GLGVBQWUsQ0FBQyxnQkFBZ0IsR0FBRztNQUU3QixPQUFPOzs7Ozt5Q0FBUyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7OztBQUExQyxlQUFPOztZQUNOLE9BQU87Ozs7Ozt5Q0FDTSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7OztBQUE5QyxlQUFPOzs7NENBRUYsT0FBTzs7Ozs7OztDQUNmLENBQUM7Ozs7Ozs7QUFPRixlQUFlLENBQUMsZ0JBQWdCLEdBQUcsb0JBQWdCLE9BQU87Ozs7O3lDQUVsRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0NBQ3hDLENBQUM7Ozs7Ozs7QUFPRixlQUFlLENBQUMsZUFBZSxHQUFHO01BRTVCLE1BQU07Ozs7O3lDQUFTLElBQUksQ0FBQyxrQkFBa0IsRUFBRTs7O0FBQXhDLGNBQU07O1lBQ0wsTUFBTTs7Ozs7O3lDQUNNLElBQUksQ0FBQyxzQkFBc0IsRUFBRTs7O0FBQTVDLGNBQU07Ozs0Q0FFRCxNQUFNOzs7Ozs7O0NBQ2QsQ0FBQzs7Ozs7Ozs7QUFRRixlQUFlLENBQUMsZUFBZSxHQUFHLG9CQUFnQixNQUFNO01BQ2hELGNBQWMsRUFNaEIsWUFBWTs7OztBQU5WLHNCQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUM7O1lBQ3RELGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzs7OztBQUM5Qiw4QkFBSSxJQUFJLGlFQUFpRSxDQUFDOzs7O0FBSXhFLG9CQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O3lDQUM5QixJQUFJLENBQUMsd0JBQXdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztDQUN0RSxDQUFDOzs7Ozs7Ozs7O0FBVUYsZUFBZSxDQUFDLG1CQUFtQixHQUFHLG9CQUFnQixRQUFRLEVBQUUsT0FBTztNQUMvRCxXQUFXLEVBQ1gsVUFBVSxFQVdWLFFBQVE7Ozs7OztBQVpSLG1CQUFXLEdBQUcsb0JBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUNsQyxrQkFBVSxHQUFHLG9CQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUM7O2NBRWxDLENBQUMsV0FBVyxJQUFJLENBQUMsVUFBVSxDQUFBOzs7OztBQUM3Qiw4QkFBSSxJQUFJLENBQUMsa0RBQWtELENBQUMsQ0FBQzs0Q0FDdEQsS0FBSzs7Ozs7QUFJZCxnQkFBUSxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQSxDQUFFLFdBQVcsRUFBRSxDQUFDO0FBQzFDLGVBQU8sR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUEsQ0FBRSxXQUFXLEVBQUUsQ0FBQzs7O3lDQUVqQixJQUFJLENBQUMsV0FBVyxFQUFFOzs7QUFBbkMsZ0JBQVE7O3lDQUVELDZCQUFjLENBQUMsRUFBRSxJQUFJLEVBQUU7Y0FHMUIsV0FBVyxFQUFFLFVBQVUsRUFpQnJCLFNBQVM7Ozs7OztzQkFsQmIsUUFBUSxHQUFHLEVBQUUsQ0FBQTs7Ozs7QUFDWCwyQkFBVyxjQUFFLFVBQVU7O3FCQUN2QixXQUFXOzs7Ozs7aURBQ1EsSUFBSSxDQUFDLGlCQUFpQixFQUFFOzs7QUFBN0MsMkJBQVcsb0JBQW9DLFdBQVc7O3NCQUN0RCxDQUFDLFVBQVUsSUFBSSxRQUFRLEtBQUssV0FBVyxDQUFBOzs7OztvREFDbEMsSUFBSTs7O3FCQUdYLFVBQVU7Ozs7OztpREFDUSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7OztBQUEzQywwQkFBVSxvQkFBbUMsV0FBVzs7c0JBQ3BELENBQUMsV0FBVyxJQUFJLE9BQU8sS0FBSyxVQUFVLENBQUE7Ozs7O29EQUNqQyxJQUFJOzs7c0JBR1gsUUFBUSxLQUFLLFdBQVcsSUFBSSxPQUFPLEtBQUssVUFBVSxDQUFBOzs7OztvREFDN0MsSUFBSTs7Ozs7Ozs7aURBR1ksSUFBSSxDQUFDLGVBQWUsRUFBRTs7O0FBQXpDLHlCQUFTLG9CQUFrQyxXQUFXOztzQkFDeEQsQUFBRyxRQUFRLFNBQUksT0FBTyxLQUFPLFNBQVMsQ0FBQTs7Ozs7b0RBQ2pDLElBQUk7OztvREFHUixLQUFLOzs7Ozs7O0FBR1osc0NBQUksS0FBSywyQ0FBeUMsZUFBSSxPQUFPLENBQUcsQ0FBQztBQUNqRSxzQ0FBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQzs7aURBQ3RDLElBQUksQ0FBQyxVQUFVLEVBQUU7Ozs7Ozs7Ozs7U0FHMUIsQ0FBQzs7Ozs7Ozs7OztDQUNILENBQUM7Ozs7Ozs7Ozs7QUFVRixlQUFlLENBQUMsd0JBQXdCLEdBQUcsb0JBQWdCLFFBQVEsRUFBRSxPQUFPO01BQ3RFLFdBQVcsRUFDWCxVQUFVLEVBTVYsaUJBQWlCLEVBQ2pCLFFBQVEsRUFNTixXQUFXLEVBQ1gsVUFBVSxFQVVWLFNBQVMsRUFHUCxNQUFNOzs7O0FBNUJWLG1CQUFXLEdBQUcsUUFBUSxJQUFJLG9CQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDOUMsa0JBQVUsR0FBRyxPQUFPLElBQUksb0JBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQzs7Y0FDM0MsQ0FBQyxXQUFXLElBQUksQ0FBQyxVQUFVLENBQUE7Ozs7O0FBQzdCLDhCQUFJLElBQUksMERBQTBELENBQUM7QUFDbkUsOEJBQUksSUFBSSxzQkFBbUIsUUFBUSwwQkFBbUIsT0FBTyxRQUFJLENBQUM7Ozs7QUFHaEUseUJBQWlCLEdBQUcsS0FBSzs7eUNBQ1IsSUFBSSxDQUFDLFdBQVcsRUFBRTs7O0FBQW5DLGdCQUFROztBQUVaLGdCQUFRLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFBLENBQUUsV0FBVyxFQUFFLENBQUM7QUFDMUMsZUFBTyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQSxDQUFFLFdBQVcsRUFBRSxDQUFDOztjQUVwQyxRQUFRLEdBQUcsRUFBRSxDQUFBOzs7Ozs7eUNBQ1UsSUFBSSxDQUFDLGlCQUFpQixFQUFFOzs7QUFBN0MsbUJBQVcsb0JBQW9DLFdBQVc7O3lDQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7OztBQUEzQyxrQkFBVSxvQkFBbUMsV0FBVzs7Y0FDeEQsV0FBVyxJQUFJLFFBQVEsS0FBSyxXQUFXLENBQUE7Ozs7Ozt5Q0FDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQzs7O0FBQ3RDLHlCQUFpQixHQUFHLElBQUksQ0FBQzs7O2NBRXZCLFVBQVUsSUFBSSxPQUFPLEtBQUssVUFBVSxDQUFBOzs7Ozs7eUNBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7OztBQUNwQyx5QkFBaUIsR0FBRyxJQUFJLENBQUM7Ozs7Ozs7O3lDQUdMLElBQUksQ0FBQyxlQUFlLEVBQUU7OztBQUF4QyxpQkFBUzs7Y0FFVCxRQUFRLEtBQUssRUFBRSxDQUFBOzs7OztBQUNiLGNBQU07O0FBQ1YsWUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLGdCQUFNLEdBQUcsUUFBUSxDQUFDO1NBQ25CLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUN2QixnQkFBTSxHQUFHLE9BQU8sQ0FBQztTQUNsQixNQUFNO0FBQ0wsZ0JBQU0sR0FBTSxRQUFRLFNBQUksT0FBTyxBQUFFLENBQUM7U0FDbkM7O0FBRUQsOEJBQUksS0FBSyx3QkFBcUIsU0FBUyxnQ0FBeUIsTUFBTSxRQUFJLENBQUM7O2NBQ3ZFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUE7Ozs7Ozt5Q0FDNUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQzs7O0FBQ3JDLHlCQUFpQixHQUFHLElBQUksQ0FBQzs7Ozs7OztjQUd2QixDQUFDLFVBQVUsSUFBSSxDQUFDLFdBQVcsQ0FBQTs7Ozs7QUFDN0IsOEJBQUksSUFBSSxxRkFBcUYsQ0FBQztBQUM5Riw4QkFBSSxJQUFJLHNCQUFtQixRQUFRLDBCQUFtQixPQUFPLFFBQUksQ0FBQzs7Ozs7QUFJcEUsOEJBQUksS0FBSyx3QkFBcUIsU0FBUyxnQ0FBeUIsUUFBUSxTQUFJLE9BQU8sUUFBSSxDQUFDOztjQUNwRixDQUFHLFFBQVEsU0FBSSxPQUFPLEVBQUcsV0FBVyxFQUFFLEtBQUssU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFBOzs7Ozs7eUNBQzlELElBQUksQ0FBQywrQkFBK0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDOzs7YUFLL0QsaUJBQWlCOzs7OztBQUNuQiw4QkFBSSxJQUFJLENBQUMsNkZBQTZGLENBQUMsQ0FBQzs7eUNBQ2xHLElBQUksQ0FBQyxNQUFNLEVBQUU7Ozs7Ozs7Q0FFdEIsQ0FBQzs7Ozs7Ozs7O0FBU0YsZUFBZSxDQUFDLGNBQWMsR0FBRyxvQkFBZ0IsR0FBRztNQUM5QyxJQUFJLFNBRUgsTUFBTSxFQUNQLFVBQVU7Ozs7O0FBSFYsWUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUM7O3lDQUM3QixJQUFJLENBQUMsUUFBUSxFQUFFOzs7O3lDQUNBLHdCQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQzs7OztBQUE5QyxjQUFNLFNBQU4sTUFBTTtBQUNQLGtCQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUNwRSxZQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtBQUN4QyxvQkFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1QixNQUFNO0FBQ0wsb0JBQVUsR0FBRyxJQUFJLENBQUM7U0FDbkI7NENBQ00sVUFBVTs7Ozs7OztDQUNsQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JGLGVBQWUsQ0FBQyxVQUFVLEdBQUcsb0JBQWdCLE9BQU87YUFNekMsTUFBTSxFQUNQLE9BQU87Ozs7Ozt5Q0FOSixrQkFBRyxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Ozs7OztBQUMzQiw4QkFBSSxhQUFhLHVCQUFxQixPQUFPLDBDQUF1QyxDQUFDOzs7O3lDQUVqRixJQUFJLENBQUMsUUFBUSxFQUFFOzs7Ozt5Q0FFSSx3QkFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7Ozs7QUFBbkUsY0FBTSxTQUFOLE1BQU07QUFDUCxlQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsbUVBQW1FLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzthQUN4RyxPQUFPOzs7Ozs0Q0FDRjtBQUNMLGNBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLHFCQUFXLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDckMscUJBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3hCOzs7Ozs7Ozs7O0FBR0gsOEJBQUksSUFBSSxhQUFXLGVBQUksT0FBTyxrQ0FBK0IsQ0FBQzs7OzRDQUV6RCxFQUFFOzs7Ozs7O0NBQ1YsQ0FBQzs7Ozs7Ozs7QUFRRixlQUFlLENBQUMsY0FBYyxHQUFHLG9CQUFnQixHQUFHO01BRTlDLE1BQU0sRUFFRixNQUFNLEVBQ04sZ0JBQWdCLEVBSWhCLGdCQUFnQjs7OztBQVJ4Qiw4QkFBSSxLQUFLLCtCQUE2QixHQUFHLENBQUcsQ0FBQztBQUN6QyxjQUFNLEdBQUcsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDOzs7eUNBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7OztBQUF0RCxjQUFNO0FBQ04sd0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUMxRSxZQUFJLGdCQUFnQixFQUFFO0FBQ3BCLGdCQUFNLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFDO0FBQ0ssd0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUNyRSxZQUFJLGdCQUFnQixFQUFFO0FBQ3BCLGdCQUFNLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN4RDs0Q0FDTSxNQUFNOzs7Ozs7QUFFYiw4QkFBSSxJQUFJLGFBQVcsZUFBSSxPQUFPLGtDQUErQixDQUFDOzs7NENBRXpELE1BQU07Ozs7Ozs7Q0FDZCxDQUFDOztxQkFFYSxlQUFlIiwiZmlsZSI6ImxpYi90b29scy9hcGstdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZFN0YXJ0Q21kIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBmcywgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxubGV0IGFwa1V0aWxzTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIHBhcnRpY3VsYXIgcGFja2FnZSBpcyBwcmVzZW50IG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYWNrYWdlIGlzIGluc3RhbGxlZC5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLmlzQXBwSW5zdGFsbGVkID0gYXN5bmMgZnVuY3Rpb24gKHBrZykge1xuICB0cnkge1xuICAgIGxldCBpbnN0YWxsZWQgPSBmYWxzZTtcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgaW5zdGFsbCBzdGF0dXMgZm9yICR7cGtnfWApO1xuICAgIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnbGlzdCcsICdwYWNrYWdlcycsIHBrZ10pO1xuICAgIGxldCBhcGtJbnN0YWxsZWRSZ3ggPSBuZXcgUmVnRXhwKGBecGFja2FnZToke3BrZy5yZXBsYWNlKC8oXFwuKS9nLCBcIlxcXFwkMVwiKX0kYCwgJ20nKTtcbiAgICBpbnN0YWxsZWQgPSBhcGtJbnN0YWxsZWRSZ3gudGVzdChzdGRvdXQpO1xuICAgIGxvZy5kZWJ1ZyhgQXBwIGlzJHshaW5zdGFsbGVkID8gJyBub3QnIDogJyd9IGluc3RhbGxlZGApO1xuICAgIHJldHVybiBpbnN0YWxsZWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRXJyb3IgZmluZGluZyBpZiBhcHAgaXMgaW5zdGFsbGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnQgdGhlIHBhcnRpY3VsYXIgVVJJIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIC0gVGhlIG5hbWUgb2YgVVJJIHRvIHN0YXJ0LlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIHN0YXJ0IHRoZSBVUkkgd2l0aC5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLnN0YXJ0VXJpID0gYXN5bmMgZnVuY3Rpb24gKHVyaSwgcGtnKSB7XG4gIGlmICghdXJpIHx8ICFwa2cpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIlVSSSBhbmQgcGFja2FnZSBhcmd1bWVudHMgYXJlIHJlcXVpcmVkXCIpO1xuICB9XG4gIHRyeSB7XG4gICAgbGV0IGFyZ3MgPSBbXCJhbVwiLCBcInN0YXJ0XCIsIFwiLVdcIiwgXCItYVwiLCBcImFuZHJvaWQuaW50ZW50LmFjdGlvbi5WSUVXXCIsIFwiLWRcIixcbiAgICAgICAgICAgICAgICB1cmkucmVwbGFjZSgvJi9nLCAnXFxcXCYnKSwgcGtnXTtcbiAgICBhd2FpdCB0aGlzLnNoZWxsKGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGF0dGVtcHRpbmcgdG8gc3RhcnQgVVJJLiBPcmlnaW5hbCBlcnJvcjogJHtlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXJ0IHRoZSBwYXJ0aWN1bGFyIHBhY2thZ2Ugb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGFydEFwcE9wdGlvbnMgW3t9XSAtIFN0YXJ0dXAgb3B0aW9ucyBtYXBwaW5nLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgaXMgbWFuZGF0b3J5IHRoYXQgJ2FjdGl2aXR5JyBhbmQgJ3BrZycgcHJvcGVydGllcyBhcmUgc2V0LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkaXRpb25hbCBzdXBwb3J0ZWQgcHJvcGVydGllcyBhcmU6ICdyZXRyeScsICdzdG9wQXBwJywgJ3dhaXRQa2cnXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgJ3dhaXRBY3Rpdml0eScuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBvdXRwdXQgb2YgdGhlIGNvcnJlc3BvbmRpbmcgYWRiIGNvbW1hbmQuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5zdGFydEFwcCA9IGFzeW5jIGZ1bmN0aW9uIChzdGFydEFwcE9wdGlvbnMgPSB7fSkge1xuICB0cnkge1xuICAgIGlmICghc3RhcnRBcHBPcHRpb25zLmFjdGl2aXR5IHx8ICFzdGFydEFwcE9wdGlvbnMucGtnKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhcImFjdGl2aXR5IGFuZCBwa2cgaXMgcmVxdWlyZWQgZm9yIGxhdW5jaGluZyBhcHBsaWNhdGlvblwiKTtcbiAgICB9XG4gICAgc3RhcnRBcHBPcHRpb25zID0gXy5jbG9uZShzdGFydEFwcE9wdGlvbnMpO1xuICAgIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSA9IHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eS5yZXBsYWNlKCckJywgJ1xcXFwkJyk7XG5cbiAgICAvLyBpbml0aWFsaXppbmcgZGVmYXVsdHNcbiAgICBfLmRlZmF1bHRzKHN0YXJ0QXBwT3B0aW9ucywge1xuICAgICAgd2FpdFBrZzogc3RhcnRBcHBPcHRpb25zLnBrZyxcbiAgICAgIHdhaXRBY3Rpdml0eTogZmFsc2UsXG4gICAgICByZXRyeTogdHJ1ZSxcbiAgICAgIHN0b3BBcHA6IHRydWVcbiAgICB9KTtcbiAgICAvLyBwcmV2ZW50aW5nIG51bGwgd2FpdHBrZ1xuICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0UGtnID0gc3RhcnRBcHBPcHRpb25zLndhaXRQa2cgfHwgc3RhcnRBcHBPcHRpb25zLnBrZztcbiAgICBsZXQgYXBpTGV2ZWwgPSBhd2FpdCB0aGlzLmdldEFwaUxldmVsKCk7XG4gICAgbGV0IGNtZCA9IGJ1aWxkU3RhcnRDbWQoc3RhcnRBcHBPcHRpb25zLCBhcGlMZXZlbCk7XG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoY21kKTtcbiAgICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJFcnJvcjogQWN0aXZpdHkgY2xhc3NcIikgIT09IC0xICYmXG4gICAgICAgIHN0ZG91dC5pbmRleE9mKFwiZG9lcyBub3QgZXhpc3RcIikgIT09IC0xKSB7XG4gICAgICBpZiAoc3RhcnRBcHBPcHRpb25zLnJldHJ5ICYmIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eVswXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiV2UgdHJpZWQgdG8gc3RhcnQgYW4gYWN0aXZpdHkgdGhhdCBkb2Vzbid0IGV4aXN0LCBcIiArXG4gICAgICAgICAgICAgICAgICBcInJldHJ5aW5nIHdpdGggLiBwcmVwZW5kZWQgdG8gYWN0aXZpdHlcIik7XG4gICAgICAgIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSA9IGAuJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9YDtcbiAgICAgICAgc3RhcnRBcHBPcHRpb25zLnJldHJ5ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXBwKHN0YXJ0QXBwT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIkFjdGl2aXR5IHVzZWQgdG8gc3RhcnQgYXBwIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXVuY2hlZCEgTWFrZSBzdXJlIGl0IGV4aXN0cyBhbmQgaXMgYSBsYXVuY2hhYmxlIGFjdGl2aXR5XCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3Rkb3V0LmluZGV4T2YoXCJqYXZhLmxhbmcuU2VjdXJpdHlFeGNlcHRpb25cIikgIT09IC0xKSB7XG4gICAgICAvLyBpZiB0aGUgYXBwIGlzIGRpc2FibGVkIG9uIGEgcmVhbCBkZXZpY2UgaXQgd2lsbCB0aHJvdyBhIHNlY3VyaXR5IGV4Y2VwdGlvblxuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJQZXJtaXNzaW9uIHRvIHN0YXJ0IGFjdGl2aXR5IGRlbmllZC5cIik7XG4gICAgfVxuICAgIGlmIChzdGFydEFwcE9wdGlvbnMud2FpdEFjdGl2aXR5KSB7XG4gICAgICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eShzdGFydEFwcE9wdGlvbnMud2FpdFBrZywgc3RhcnRBcHBPcHRpb25zLndhaXRBY3Rpdml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0RHVyYXRpb24pO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBvY2N1cmVkIHdoaWxlIHN0YXJ0aW5nIEFwcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBhY2thZ2VBY3Rpdml0eUluZm9cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYXBwUGFja2FnZSAtIFRoZSBuYW1lIG9mIGFwcGxpY2F0aW9uIHBhY2thZ2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSAnY29tLmFjbWUuYXBwJy5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYXBwQWN0aXZpdHkgLSBUaGUgbmFtZSBvZiBtYWluIGFwcGxpY2F0aW9uIGFjdGl2aXR5LlxuICovXG5cbi8qKlxuICogR2V0IHRoZSBuYW1lIG9mIGN1cnJlbnRseSBmb2N1c2VkIHBhY2thZ2UgYW5kIGFjdGl2aXR5LlxuICpcbiAqIEByZXR1cm4ge1BhY2thZ2VBY3Rpdml0eUluZm99IFRoZSBtYXBwaW5nLCB3aGVyZSBwcm9wZXJ0eSBuYW1lcyBhcmUgJ2FwcFBhY2thZ2UnIGFuZCAnYXBwQWN0aXZpdHknLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIGFuIGVycm9yIHdoaWxlIHBhcnNpbmcgdGhlIGRhdGEuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoXCJHZXR0aW5nIGZvY3VzZWQgcGFja2FnZSBhbmQgYWN0aXZpdHlcIik7XG4gIGxldCBjbWQgPSBbJ2R1bXBzeXMnLCAnd2luZG93JywgJ3dpbmRvd3MnXTtcbiAgbGV0IG51bGxSZSA9IG5ldyBSZWdFeHAoL21Gb2N1c2VkQXBwPW51bGwvKTtcbiAgbGV0IHNlYXJjaFJlID0gbmV3IFJlZ0V4cCgnbUZvY3VzZWRBcHAuK1JlY29yZFxcXFx7LipcXFxccyhbXlxcXFxzXFxcXC9cXFxcfV0rKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXFxcLyhbXlxcXFxzXFxcXC9cXFxcfVxcXFwsXSspXFxcXCw/KFxcXFxzW15cXFxcc1xcXFwvXFxcXH1dKykqXFxcXH0nKTsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94Wjh2RjcvMVxuICB0cnkge1xuICAgIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKGNtZCk7XG4gICAgbGV0IGZvdW5kTnVsbE1hdGNoID0gZmFsc2U7XG4gICAgZm9yIChsZXQgbGluZSBvZiBzdGRvdXQuc3BsaXQoXCJcXG5cIikpIHtcbiAgICAgIGxldCBmb3VuZE1hdGNoID0gc2VhcmNoUmUuZXhlYyhsaW5lKTtcbiAgICAgIGlmIChmb3VuZE1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7YXBwUGFja2FnZTogZm91bmRNYXRjaFsxXS50cmltKCksIGFwcEFjdGl2aXR5OiBmb3VuZE1hdGNoWzJdLnRyaW0oKX07XG4gICAgICB9IGVsc2UgaWYgKG51bGxSZS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGZvdW5kTnVsbE1hdGNoID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvdW5kTnVsbE1hdGNoKSB7XG4gICAgICByZXR1cm4ge2FwcFBhY2thZ2U6IG51bGwsIGFwcEFjdGl2aXR5OiBudWxsfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJDb3VsZCBub3QgcGFyc2UgYWN0aXZpdHkgZnJvbSBkdW1wc3lzXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZ2V0IGZvY3VzUGFja2FnZUFuZEFjdGl2aXR5LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FpdCBmb3IgdGhlIGdpdmVuIGFjdGl2aXR5IHRvIGJlIGZvY3VzZWQvbm9uLWZvY3VzZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIHdhaXQgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2aXR5IC0gVGhlIG5hbWUgb2YgdGhlIGFjdGl2aXR5LCBiZWxvbmdpbmcgdG8gdGhhdCBwYWNrYWdlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHdhaXRGb3JTdG9wIC0gV2hldGhlciB0byB3YWl0IHVudGlsIHRoZSBhY3Rpdml0eSBpcyBmb2N1c2VkICh0cnVlKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGlzIG5vdCBmb2N1c2VkIChmYWxzZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdE1zIFsyMDAwMF0gLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHRpbWVvdXQgb2NjdXJzLlxuICogQHRocm93cyB7ZXJyb3J9IElmIHRpbWVvdXQgaGFwcGVucy5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLndhaXRGb3JBY3Rpdml0eU9yTm90ID0gYXN5bmMgZnVuY3Rpb24gKHBrZywgYWN0aXZpdHksIHdhaXRGb3JTdG9wLCB3YWl0TXMgPSAyMDAwMCkge1xuICBpZiAoIXBrZyB8fCAhYWN0aXZpdHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhY2thZ2UgYW5kIGFjdGl2aXR5IHJlcXVpcmVkLicpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgV2FpdGluZyB1cCB0byAke3dhaXRNc31tcyBmb3IgYWN0aXZpdHkgbWF0Y2hpbmcgcGtnOiAnJHtwa2d9JyBhbmQgYCArXG4gICAgICAgICAgICBgYWN0aXZpdHk6ICcke2FjdGl2aXR5fScgdG8ke3dhaXRGb3JTdG9wID8gJyBub3QnIDogJyd9IGJlIGZvY3VzZWRgKTtcblxuICBjb25zdCBzcGxpdE5hbWVzID0gKG5hbWVzKSA9PiBuYW1lcy5zcGxpdCgnLCcpLm1hcCgobmFtZSkgPT4gbmFtZS50cmltKCkpO1xuXG4gIGNvbnN0IGFsbFBhY2thZ2VzID0gc3BsaXROYW1lcyhwa2cpO1xuICBjb25zdCBhbGxBY3Rpdml0aWVzID0gc3BsaXROYW1lcyhhY3Rpdml0eSk7XG5cbiAgbGV0IHBvc3NpYmxlQWN0aXZpdHlOYW1lcyA9IFtdO1xuICBmb3IgKGxldCBvbmVBY3Rpdml0eSBvZiBhbGxBY3Rpdml0aWVzKSB7XG4gICAgaWYgKG9uZUFjdGl2aXR5LnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgLy8gYWRkIHRoZSBwYWNrYWdlIG5hbWUgaWYgYWN0aXZpdHkgaXMgbm90IGZ1bGwgcXVhbGlmaWVkXG4gICAgICBmb3IgKGxldCBjdXJyZW50UGtnIG9mIGFsbFBhY2thZ2VzKSB7XG4gICAgICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKGAke2N1cnJlbnRQa2d9JHtvbmVBY3Rpdml0eX1gLnJlcGxhY2UoL1xcLisvZywgJy4nKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFjY2VwdCBmdWxseSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZS5cbiAgICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKG9uZUFjdGl2aXR5KTtcbiAgICB9XG4gIH1cbiAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuICBsb2cuZGVidWcoYFBvc3NpYmxlIGFjdGl2aXRpZXMsIHRvIGJlIGNoZWNrZWQ6ICR7cG9zc2libGVBY3Rpdml0eU5hbWVzLm1hcCgobmFtZSkgPT4gYCcke25hbWV9J2ApLmpvaW4oJywgJyl9YCk7XG4gIC8qIGpzaGludCBpZ25vcmU6ZW5kICovXG4gIGxldCBwb3NzaWJsZUFjdGl2aXR5UGF0dGVybnMgPSBwb3NzaWJsZUFjdGl2aXR5TmFtZXMubWFwKChwb3NzaWJsZUFjdGl2aXR5TmFtZSkgPT5cbiAgICBuZXcgUmVnRXhwKGBeJHtwb3NzaWJsZUFjdGl2aXR5TmFtZS5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykucmVwbGFjZSgvXFwqL2csICcuKj8nKS5yZXBsYWNlKC9cXCQvZywgJ1xcXFwkJyl9JGApXG4gICk7XG5cbiAgLy8gZmlndXJlIG91dCB0aGUgbnVtYmVyIG9mIHJldHJpZXMuIFRyeSBvbmNlIGlmIHdhaXRNcyBpcyBsZXNzIHRoYXQgNzUwXG4gIC8vIDMwIHRpbWVzIGlmIHBhcnNpbmcgaXMgbm90IHBvc3NpYmxlXG4gIGxldCByZXRyaWVzID0gcGFyc2VJbnQod2FpdE1zIC8gNzUwLCAxMCkgfHwgMTtcbiAgcmV0cmllcyA9IGlzTmFOKHJldHJpZXMpID8gMzAgOiByZXRyaWVzO1xuICBhd2FpdCByZXRyeUludGVydmFsKHJldHJpZXMsIDc1MCwgYXN5bmMgKCkgPT4ge1xuICAgIGxldCB7YXBwUGFja2FnZSwgYXBwQWN0aXZpdHl9ID0gYXdhaXQgdGhpcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gICAgaWYgKGFwcEFjdGl2aXR5ICYmIGFwcFBhY2thZ2UpIHtcbiAgICAgIGxldCBmdWxseVF1YWxpZmllZEFjdGl2aXR5ID0gYXBwQWN0aXZpdHkuc3RhcnRzV2l0aCgnLicpID8gYCR7YXBwUGFja2FnZX0ke2FwcEFjdGl2aXR5fWAgOiBhcHBBY3Rpdml0eTtcbiAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgcGFja2FnZTogJyR7YXBwUGFja2FnZX0nIGFuZCBmdWxseSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZSA6ICcke2Z1bGx5UXVhbGlmaWVkQWN0aXZpdHl9J2ApO1xuICAgICAgbGV0IGZvdW5kQWN0ID0gKF8uaW5jbHVkZXMoYWxsUGFja2FnZXMsIGFwcFBhY2thZ2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgXy5maW5kSW5kZXgocG9zc2libGVBY3Rpdml0eVBhdHRlcm5zLCAocG9zc2libGVQYXR0ZXJuKSA9PiBwb3NzaWJsZVBhdHRlcm4udGVzdChmdWxseVF1YWxpZmllZEFjdGl2aXR5KSkgIT09IC0xKTtcbiAgICAgIGlmICgoIXdhaXRGb3JTdG9wICYmIGZvdW5kQWN0KSB8fCAod2FpdEZvclN0b3AgJiYgIWZvdW5kQWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGxvZy5kZWJ1ZygnSW5jb3JyZWN0IHBhY2thZ2UgYW5kIGFjdGl2aXR5LiBSZXRyeWluZy4nKTtcbiAgICAvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3Bvc3NpYmxlQWN0aXZpdHlOYW1lcy5tYXAoKG5hbWUpID0+IGAnJHtuYW1lfSdgKS5qb2luKCcgb3IgJyl9IG5ldmVyICR7d2FpdEZvclN0b3AgPyAnc3RvcHBlZCcgOiAnc3RhcnRlZCd9YCk7XG4gICAgLyoganNoaW50IGlnbm9yZTplbmQgKi9cbiAgfSk7XG59O1xuXG4vKipcbiAqIFdhaXQgZm9yIHRoZSBnaXZlbiBhY3Rpdml0eSB0byBiZSBmb2N1c2VkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIHdhaXQgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2aXR5IC0gVGhlIG5hbWUgb2YgdGhlIGFjdGl2aXR5LCBiZWxvbmdpbmcgdG8gdGhhdCBwYWNrYWdlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdE1zIFsyMDAwMF0gLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHRpbWVvdXQgb2NjdXJzLlxuICogQHRocm93cyB7ZXJyb3J9IElmIHRpbWVvdXQgaGFwcGVucy5cbiAqL1xuYXBrVXRpbHNNZXRob2RzLndhaXRGb3JBY3Rpdml0eSA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIGFjdCwgd2FpdE1zID0gMjAwMDApIHtcbiAgYXdhaXQgdGhpcy53YWl0Rm9yQWN0aXZpdHlPck5vdChwa2csIGFjdCwgZmFsc2UsIHdhaXRNcyk7XG59O1xuXG4vKipcbiAqIFdhaXQgZm9yIHRoZSBnaXZlbiBhY3Rpdml0eSB0byBiZSBub24tZm9jdXNlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aXZpdHkgLSBUaGUgbmFtZSBvZiB0aGUgYWN0aXZpdHksIGJlbG9uZ2luZyB0byB0aGF0IHBhY2thZ2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB3YWl0IGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0TXMgWzIwMDAwXSAtIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgdGltZW91dCBvY2N1cnMuXG4gKiBAdGhyb3dzIHtlcnJvcn0gSWYgdGltZW91dCBoYXBwZW5zLlxuICovXG5hcGtVdGlsc01ldGhvZHMud2FpdEZvck5vdEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKHBrZywgYWN0LCB3YWl0TXMgPSAyMDAwMCkge1xuICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eU9yTm90KHBrZywgYWN0LCB0cnVlLCB3YWl0TXMpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBVbmluc3RhbGxPcHRpb25zXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZW91dCBbMjAwMDBdIC0gVGhlIGNvdW50IG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcCBpcyB1bmluc3RhbGxlZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0ga2VlcERhdGEgW2ZhbHNlXSAtIFNldCB0byB0cnVlIGluIG9yZGVyIHRvIGtlZXAgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbiBkYXRhIGFuZCBjYWNoZSBmb2xkZXJzIGFmdGVyIHVuaW5zdGFsbC5cbiAqL1xuXG5jb25zdCBBUEtfVU5JTlNUQUxMX1RJTUVPVVQgPSAyMDAwMDtcblxuLyoqXG4gKiBVbmluc3RhbGwgdGhlIGdpdmVuIHBhY2thZ2UgZnJvbSB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHRvIGJlIHVuaW5zdGFsbGVkLlxuICogQHBhcmFtIHs/VW5pbnN0YWxsT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBzZXQgb2YgdW5pbnN0YWxsYXRpb24gb3B0aW9ucy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBhY2thZ2Ugd2FzIGZvdW5kIG9uIHRoZSBkZXZpY2UgYW5kXG4gKiAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsbHkgdW5pbnN0YWxsZWQuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy51bmluc3RhbGxBcGsgPSBhc3luYyBmdW5jdGlvbiAocGtnLCBvcHRpb25zID0ge30pIHtcbiAgbG9nLmRlYnVnKGBVbmluc3RhbGxpbmcgJHtwa2d9YCk7XG4gIGlmICghYXdhaXQgdGhpcy5pc0FwcEluc3RhbGxlZChwa2cpKSB7XG4gICAgbG9nLmluZm8oYCR7cGtnfSB3YXMgbm90IHVuaW5zdGFsbGVkLCBiZWNhdXNlIGl0IHdhcyBub3QgcHJlc2VudCBvbiB0aGUgZGV2aWNlYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHRpbWVvdXQgPSBBUEtfVU5JTlNUQUxMX1RJTUVPVVQ7XG4gIGlmICh1dGlsLmhhc1ZhbHVlKG9wdGlvbnMudGltZW91dCkgJiYgIWlzTmFOKG9wdGlvbnMudGltZW91dCkpIHtcbiAgICB0aW1lb3V0ID0gcGFyc2VJbnQob3B0aW9ucy50aW1lb3V0LCAxMCk7XG4gIH1cbiAgY29uc3QgY21kID0gWyd1bmluc3RhbGwnXTtcbiAgaWYgKG9wdGlvbnMua2VlcERhdGEpIHtcbiAgICBjbWQucHVzaCgnLWsnKTtcbiAgfVxuICBjbWQucHVzaChwa2cpO1xuXG4gIGxldCBzdGRvdXQ7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5mb3JjZVN0b3AocGtnKTtcbiAgICBzdGRvdXQgPSAoYXdhaXQgdGhpcy5hZGJFeGVjKGNtZCwge3RpbWVvdXR9KSkudHJpbSgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFVuYWJsZSB0byB1bmluc3RhbGwgQVBLLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbiAgbG9nLmRlYnVnKGAnYWRiICR7Y21kLmpvaW4oJyAnKX0nIGNvbW1hbmQgb3V0cHV0OiAke3N0ZG91dH1gKTtcbiAgaWYgKHN0ZG91dC5pbmNsdWRlcyhcIlN1Y2Nlc3NcIikpIHtcbiAgICBsb2cuaW5mbyhgJHtwa2d9IHdhcyBzdWNjZXNzZnVsbHkgdW5pbnN0YWxsZWRgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsb2cuaW5mbyhgJHtwa2d9IHdhcyBub3QgdW5pbnN0YWxsZWRgKTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBJbnN0YWxsIHRoZSBwYWNrYWdlIGFmdGVyIGl0IHdhcyBwdXNoZWQgdG8gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtQYXRoT25EZXZpY2UgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBwYWNrYWdlIG9uIHRoZSBkZXZpY2UgZmlsZSBzeXN0ZW0uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBbe31dIC0gQWRkaXRpb25hbCBleGVjIG9wdGlvbnMuIFNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9ub2RlLXRlZW5fcHJvY2Vzc31cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoaXMgcGFyYW1ldGVyLlxuICogQHRocm93cyB7ZXJyb3J9IElmIHRoZXJlIHdhcyBhIGZhaWx1cmUgZHVyaW5nIGFwcGxpY2F0aW9uIGluc3RhbGwuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5pbnN0YWxsRnJvbURldmljZVBhdGggPSBhc3luYyBmdW5jdGlvbiAoYXBrUGF0aE9uRGV2aWNlLCBvcHRzID0ge30pIHtcbiAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoWydwbScsICdpbnN0YWxsJywgJy1yJywgYXBrUGF0aE9uRGV2aWNlXSwgb3B0cyk7XG4gIGlmIChzdGRvdXQuaW5kZXhPZihcIkZhaWx1cmVcIikgIT09IC0xKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFJlbW90ZSBpbnN0YWxsIGZhaWxlZDogJHtzdGRvdXR9YCk7XG4gIH1cbn07XG5cbmNvbnN0IEFQS19JTlNUQUxMX1RJTUVPVVQgPSA2MDAwMDtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVvdXQgWzYwMDAwXSAtIFRoZSBjb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCB1bnRpbCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgaXMgaW5zdGFsbGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhbGxvd1Rlc3RQYWNrYWdlcyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gYWxsb3cgdGVzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2FnZXMgaW5zdGFsbGF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSB1c2VTZGNhcmQgW2ZhbHNlXSAtIFNldCB0byB0cnVlIHRvIGluc3RhbGwgdGhlIGFwcCBvbiBzZGNhcmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHRoZSBkZXZpY2UgbWVtb3J5LlxuICogQHByb3BlcnR5IHtib29sZWFufSBncmFudFBlcm1pc3Npb25zIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSBpbiBvcmRlciB0byBncmFudCBhbGwgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zIHJlcXVlc3RlZCBpbiB0aGUgYXBwbGljYXRpb24ncyBtYW5pZmVzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvbWF0aWNhbGx5IGFmdGVyIHRoZSBpbnN0YWxsYXRpb24gaXMgY29tcGxldGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyIEFuZHJvaWQgNisuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHJlcGxhY2UgW3RydWVdIC0gU2V0IGl0IHRvIGZhbHNlIGlmIHlvdSBkb24ndCB3YW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIHVwZ3JhZGVkL3JlaW5zdGFsbGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXQgaXMgYWxyZWFkeSBwcmVzZW50IG9uIHRoZSBkZXZpY2UuXG4gKi9cblxuLyoqXG4gKiBJbnN0YWxsIHRoZSBwYWNrYWdlIGZyb20gdGhlIGxvY2FsIGZpbGUgc3lzdGVtLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGsgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBsb2NhbCBwYWNrYWdlLlxuICogQHBhcmFtIHtib29sZWFufSByZXBhbGNlIFt0cnVlXSAtIFdoZXRoZXIgdG8gcmVwbGFjZSB0aGUgcGFja2FnZSBpZiBpdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgaW5zdGFsbGVkLiBUcnVlIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0gez9JbnN0YWxsT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBzZXQgb2YgaW5zdGFsbGF0aW9uIG9wdGlvbnMuXG4gKiBAdGhyb3dzIHtlcnJvcn0gSWYgYW4gdW5leHBlY3RlZCBlcnJvciBoYXBwZW5zIGR1cmluZyBpbnN0YWxsLlxuICovXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbCA9IGFzeW5jIGZ1bmN0aW9uIChhcGssIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoIXV0aWwuaGFzVmFsdWUob3B0aW9ucy5yZXBsYWNlKSkge1xuICAgIG9wdGlvbnMucmVwbGFjZSA9IHRydWU7XG4gIH1cbiAgbGV0IHRpbWVvdXQgPSBBUEtfSU5TVEFMTF9USU1FT1VUO1xuICBpZiAodXRpbC5oYXNWYWx1ZShvcHRpb25zLnRpbWVvdXQpICYmICFpc05hTihvcHRpb25zLnRpbWVvdXQpKSB7XG4gICAgdGltZW91dCA9IHBhcnNlSW50KG9wdGlvbnMudGltZW91dCwgMTApO1xuICB9XG5cbiAgY29uc3QgYWRkaXRpb25hbEFyZ3MgPSBbXTtcbiAgaWYgKG9wdGlvbnMuYWxsb3dUZXN0UGFja2FnZXMpIHtcbiAgICBhZGRpdGlvbmFsQXJncy5wdXNoKCctdCcpO1xuICB9XG4gIGlmIChvcHRpb25zLnVzZVNkY2FyZCkge1xuICAgIGFkZGl0aW9uYWxBcmdzLnB1c2goJy1zJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuZ3JhbnRQZXJtaXNzaW9ucykge1xuICAgIGNvbnN0IGFwaUxldmVsID0gYXdhaXQgdGhpcy5nZXRBcGlMZXZlbCgpO1xuICAgIGlmIChhcGlMZXZlbCA8IDIzKSB7XG4gICAgICBsb2cuZGVidWcoYFNraXBwaW5nIGdyYW50aW5nIHBlcm1pc3Npb25zIGZvciAnJHthcGt9Jywgc2luY2UgYCArXG4gICAgICAgICAgICAgICAgYHRoZSBjdXJyZW50IEFQSSBsZXZlbCAke2FwaUxldmVsfSBkb2VzIG5vdCBzdXBwb3J0IGFwcGxpY2F0aW9ucyBgICtcbiAgICAgICAgICAgICAgICBgcGVybWlzc2lvbnMgY3VzdG9taXphdGlvbmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRpdGlvbmFsQXJncy5wdXNoKCctZycpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnJlcGxhY2UpIHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmFkYkV4ZWMoWydpbnN0YWxsJywgJy1yJywgLi4uYWRkaXRpb25hbEFyZ3MsIGFwa10sIHt0aW1lb3V0fSk7XG4gICAgbG9nLmRlYnVnKGBJbnN0YWxsIGNvbW1hbmQgc3Rkb3V0OiAke291dHB1dH1gKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5hZGJFeGVjKFsnaW5zdGFsbCcsIC4uLmFkZGl0aW9uYWxBcmdzLCBhcGtdLCB7dGltZW91dH0pO1xuICAgICAgbG9nLmRlYnVnKGBJbnN0YWxsIGNvbW1hbmQgc3Rkb3V0OiAke291dHB1dH1gKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIG9uIHNvbWUgc3lzdGVtcyB0aGlzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGFwcCBhbHJlYWR5XG4gICAgICAvLyBleGlzdHNcbiAgICAgIGlmICghZXJyLm1lc3NhZ2UuaW5jbHVkZXMoJ0lOU1RBTExfRkFJTEVEX0FMUkVBRFlfRVhJU1RTJykpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKGBBcHBsaWNhdGlvbiAnJHthcGt9JyBhbHJlYWR5IGluc3RhbGxlZC4gQ29udGludWluZy5gKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5zdGFsbE9yVXBncmFkZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0aW1lb3V0IFs2MDAwMF0gLSBUaGUgY291bnQgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwIGlzIGluc3RhbGxlZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYWxsb3dUZXN0UGFja2FnZXMgW2ZhbHNlXSAtIFNldCB0byB0cnVlIGluIG9yZGVyIHRvIGFsbG93IHRlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VzIGluc3RhbGxhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdXNlU2RjYXJkIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSB0byBpbnN0YWxsIHRoZSBhcHAgb24gc2RjYXJkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiB0aGUgZGV2aWNlIG1lbW9yeS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZ3JhbnRQZXJtaXNzaW9ucyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gZ3JhbnQgYWxsIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucyByZXF1ZXN0ZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgbWFuaWZlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseSBhZnRlciB0aGUgaW5zdGFsbGF0aW9uIGlzIGNvbXBsZXRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlciBBbmRyb2lkIDYrLlxuICovXG5cbi8qKlxuICogSW5zdGFsbCB0aGUgcGFja2FnZSBmcm9tIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSBvZiB1cGdyYWRlIGl0IGlmIGFuIG9sZGVyXG4gKiB2ZXJzaW9uIG9mIHRoZSBzYW1lIHBhY2thZ2UgaXMgYWxyZWFkeSBpbnN0YWxsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwayAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIHBhY2thZ2UuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBrZyAtIFRoZSBuYW1lIG9mIHRoZSBpbnN0YWxsZWQgcGFja2FnZS4gVGhlIG1ldGhvZCB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm0gZmFzdGVyIGlmIGl0IGlzIHNldC5cbiAqIEBwYXJhbSB7P0luc3RhbGxPclVwZ3JhZGVPcHRpb25zfSBvcHRpb25zIC0gU2V0IG9mIGluc3RhbGwgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge2Vycm9yfSBJZiBhbiB1bmV4cGVjdGVkIGVycm9yIGhhcHBlbnMgZHVyaW5nIGluc3RhbGwuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5pbnN0YWxsT3JVcGdyYWRlID0gYXN5bmMgZnVuY3Rpb24gKGFwaywgcGtnID0gbnVsbCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICghdXRpbC5oYXNWYWx1ZShvcHRpb25zLnRpbWVvdXQpKSB7XG4gICAgb3B0aW9ucy50aW1lb3V0ID0gQVBLX0lOU1RBTExfVElNRU9VVDtcbiAgfVxuXG4gIGxldCBhcGtJbmZvID0gbnVsbDtcbiAgaWYgKCFwa2cpIHtcbiAgICBhcGtJbmZvID0gYXdhaXQgdGhpcy5nZXRBcGtJbmZvKGFwayk7XG4gICAgcGtnID0gYXBrSW5mby5uYW1lO1xuICB9XG4gIGlmICghcGtnKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCByZWFkIHRoZSBwYWNrYWdlIG5hbWUgb2YgJHthcGt9LiBBc3N1bWluZyBjb3JyZWN0IGFwcCB2ZXJzaW9uIGlzIGFscmVhZHkgaW5zdGFsbGVkYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFhd2FpdCB0aGlzLmlzQXBwSW5zdGFsbGVkKHBrZykpIHtcbiAgICBsb2cuZGVidWcoYEFwcCAnJHthcGt9JyBub3QgaW5zdGFsbGVkLiBJbnN0YWxsaW5nYCk7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwaywgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge3JlcGxhY2U6IGZhbHNlfSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHt2ZXJzaW9uQ29kZTpwa2dWZXJzaW9uQ29kZSwgdmVyc2lvbk5hbWU6cGtnVmVyc2lvbk5hbWVTdHJ9ID0gYXdhaXQgdGhpcy5nZXRQYWNrYWdlSW5mbyhwa2cpO1xuICBjb25zdCBwa2dWZXJzaW9uTmFtZSA9IHNlbXZlci52YWxpZChzZW12ZXIuY29lcmNlKHBrZ1ZlcnNpb25OYW1lU3RyKSk7XG4gIGlmICghYXBrSW5mbykge1xuICAgIGFwa0luZm8gPSBhd2FpdCB0aGlzLmdldEFwa0luZm8oYXBrKTtcbiAgfVxuICBjb25zdCB7dmVyc2lvbkNvZGU6YXBrVmVyc2lvbkNvZGUsIHZlcnNpb25OYW1lOmFwa1ZlcnNpb25OYW1lU3RyfSA9IGFwa0luZm87XG4gIGNvbnN0IGFwa1ZlcnNpb25OYW1lID0gc2VtdmVyLnZhbGlkKHNlbXZlci5jb2VyY2UoYXBrVmVyc2lvbk5hbWVTdHIpKTtcblxuICBpZiAoIV8uaXNOdW1iZXIoYXBrVmVyc2lvbkNvZGUpIHx8ICFfLmlzTnVtYmVyKHBrZ1ZlcnNpb25Db2RlKSkge1xuICAgIGxvZy53YXJuKGBDYW5ub3QgcmVhZCB2ZXJzaW9uIGNvZGVzIG9mICcke2Fwa30nIGFuZC9vciAnJHtwa2d9J2ApO1xuICAgIGlmICghXy5pc1N0cmluZyhhcGtWZXJzaW9uTmFtZSkgfHwgIV8uaXNTdHJpbmcocGtnVmVyc2lvbk5hbWUpKSB7XG4gICAgICBsb2cud2FybihgQ2Fubm90IHJlYWQgdmVyc2lvbiBuYW1lcyBvZiAnJHthcGt9JyBhbmQvb3IgJyR7cGtnfScuIEFzc3VtaW5nIGNvcnJlY3QgYXBwIHZlcnNpb24gaXMgYWxyZWFkeSBpbnN0YWxsZWRgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKF8uaXNOdW1iZXIoYXBrVmVyc2lvbkNvZGUpICYmIF8uaXNOdW1iZXIocGtnVmVyc2lvbkNvZGUpICYmIHBrZ1ZlcnNpb25Db2RlID4gYXBrVmVyc2lvbkNvZGUpIHtcbiAgICBsb2cuZGVidWcoYFRoZSBpbnN0YWxsZWQgJyR7cGtnfScgcGFja2FnZSBkb2VzIG5vdCByZXF1aXJlIHVwZ3JhZGUgKCR7cGtnVmVyc2lvbkNvZGV9ID4gJHthcGtWZXJzaW9uQ29kZX0pYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIENoZWNrIHZlcnNpb24gbmFtZXMgaW4gY2FzZSBpZiB2ZXJzaW9uIGNvZGVzIGFyZSBub3QgYmVpbmcgdXBkYXRlZCBwcm9wZXJseVxuICBpZiAoXy5pc1N0cmluZyhhcGtWZXJzaW9uTmFtZSkgJiYgXy5pc1N0cmluZyhwa2dWZXJzaW9uTmFtZSkpIHtcbiAgICBpZiAoc2VtdmVyLnNhdGlzZmllcyhwa2dWZXJzaW9uTmFtZSwgYD49JHthcGtWZXJzaW9uTmFtZX1gKSkge1xuICAgICAgbG9nLmRlYnVnKGBUaGUgaW5zdGFsbGVkICcke3BrZ30nIHBhY2thZ2UgZG9lcyBub3QgcmVxdWlyZSB1cGdyYWRlICgnJHtwa2dWZXJzaW9uTmFtZX0nID49ICcke2Fwa1ZlcnNpb25OYW1lfScpYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2UgaWYgKF8uaXNOdW1iZXIoYXBrVmVyc2lvbkNvZGUpICYmIF8uaXNOdW1iZXIocGtnVmVyc2lvbkNvZGUpICYmIHBrZ1ZlcnNpb25Db2RlID09PSBhcGtWZXJzaW9uQ29kZSkge1xuICAgIGxvZy5kZWJ1ZyhgVGhlIGluc3RhbGxlZCAnJHtwa2d9JyBwYWNrYWdlIGRvZXMgbm90IHJlcXVpcmUgdXBncmFkZSAoJHtwa2dWZXJzaW9uQ29kZX0gPT09ICR7YXBrVmVyc2lvbkNvZGV9KWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgVGhlIGluc3RhbGxlZCAnJHtwa2d9JyBwYWNrYWdlIGlzIG9sZGVyIHRoYW4gJyR7YXBrfScgYCArXG4gICAgICAgICAgICBgKCR7cGtnVmVyc2lvbkNvZGV9IDwgJHthcGtWZXJzaW9uQ29kZX0gb3IgJyR7cGtnVmVyc2lvbk5hbWV9JyA8ICcke2Fwa1ZlcnNpb25OYW1lfScpJy4gYCArXG4gICAgICAgICAgICBgRXhlY3V0aW5nIHVwZ3JhZGVgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmluc3RhbGwoYXBrLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7cmVwbGFjZTogdHJ1ZX0pKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCB1cGdyYWRlICcke3BrZ30nIGJlY2F1c2Ugb2YgJyR7ZXJyLm1lc3NhZ2V9Jy4gVHJ5aW5nIGZ1bGwgcmVpbnN0YWxsYCk7XG4gICAgaWYgKCFhd2FpdCB0aGlzLnVuaW5zdGFsbEFwayhwa2cpKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgJyR7cGtnfScgcGFja2FnZSBjYW5ub3QgYmUgdW5pbnN0YWxsZWRgKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwaywgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge3JlcGxhY2U6IGZhbHNlfSkpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4dHJhY3Qgc3RyaW5nIHJlc291cmNlcyBmcm9tIHRoZSBnaXZlbiBwYWNrYWdlIG9uIGxvY2FsIGZpbGUgc3lzdGVtLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGsgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBsb2NhbCBwYWNrYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIC0gVGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIHRvIGV4dHJhY3QgdGhlIHJlc291cmNlcyBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0IC0gVGhlIG5hbWUgb2YgdGhlIGRlc3RpbmF0aW9uIGZvbGRlciBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0gdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICBzdG9yZSB0aGUgZXh0cmFjdGVkIGZpbGUgdG8uXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbWFwcGluZyBvYmplY3QsIHdoZXJlIHByb3BlcnRpZXMgYXJlOiAnYXBrU3RyaW5ncycsIGNvbnRhaW5pbmdcbiAqICAgICAgICAgICAgICAgICAgcGFyc2VkIHJlc291cmNlIGZpbGUgcmVwcmVzZW50ZWQgYXMgSlNPTiBvYmplY3QsIGFuZCAnbG9jYWxQYXRoJyxcbiAqICAgICAgICAgICAgICAgICAgY29udGFpbmluZyB0aGUgcGF0aCB0byB0aGUgZXh0cmFjdGVkIGZpbGUgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtLlxuICovXG5hcGtVdGlsc01ldGhvZHMuZXh0cmFjdFN0cmluZ3NGcm9tQXBrID0gYXN5bmMgZnVuY3Rpb24gKGFwaywgbGFuZ3VhZ2UsIG91dCkge1xuICBsb2cuZGVidWcoYEV4dHJhY3Rpbmcgc3RyaW5ncyBmb3IgbGFuZ3VhZ2U6ICR7bGFuZ3VhZ2UgfHwgXCJkZWZhdWx0XCJ9YCk7XG4gIGxldCBzdHJpbmdzSnNvbiA9ICdzdHJpbmdzLmpzb24nO1xuICBsZXQgbG9jYWxQYXRoO1xuICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgbGFuZ3VhZ2UgPSBhd2FpdCB0aGlzLmdldERldmljZUxhbmd1YWdlKCk7XG4gIH1cbiAgbGV0IGFwa1Rvb2xzID0gdGhpcy5qYXJzWydhcHBpdW1fYXBrX3Rvb2xzLmphciddO1xuICBsZXQgYXJncyA9IFsnLWphcicsIGFwa1Rvb2xzLCAnc3RyaW5nc0Zyb21BcGsnLCBhcGssIG91dCwgbGFuZ3VhZ2VdO1xuICBsZXQgZmlsZURhdGEsIGFwa1N0cmluZ3M7XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYygnamF2YScsIGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmRlYnVnKGBObyBzdHJpbmdzLnhtbCBmb3IgbGFuZ3VhZ2UgJyR7bGFuZ3VhZ2V9JywgZ2V0dGluZyBkZWZhdWx0IGAgK1xuICAgICAgICAgICAgICBgc3RyaW5ncy54bWxgKTtcbiAgICBhcmdzLnBvcCgpO1xuICAgIGF3YWl0IGV4ZWMoJ2phdmEnLCBhcmdzKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9nLmRlYnVnKFwiUmVhZGluZyBzdHJpbmdzIGZyb20gY29udmVydGVkIHN0cmluZ3MuanNvblwiKTtcbiAgICBsb2NhbFBhdGggPSBwYXRoLmpvaW4ob3V0LCBzdHJpbmdzSnNvbik7XG4gICAgZmlsZURhdGEgPSBhd2FpdCBmcy5yZWFkRmlsZShsb2NhbFBhdGgsICd1dGY4Jyk7XG4gICAgYXBrU3RyaW5ncyA9IEpTT04ucGFyc2UoZmlsZURhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGZpbGVEYXRhKSB7XG4gICAgICBsb2cuZGVidWcoYENvbnRlbnQgc3RhcnRlZCB3aXRoOiAke2ZpbGVEYXRhLnNsaWNlKDAsIDMwMCl9YCk7XG4gICAgfVxuICAgIGxldCBtc2cgPSBgQ291bGQgbm90IHBhcnNlIHN0cmluZ3MgZnJvbSBzdHJpbmdzLmpzb24uIE9yaWdpbmFsIGAgK1xuICAgICAgICAgICAgICBgZXJyb3I6ICR7ZS5tZXNzYWdlfWA7XG4gICAgbG9nLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgfVxuICByZXR1cm4ge2Fwa1N0cmluZ3MsIGxvY2FsUGF0aH07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbGFuZ3VhZ2UgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiBkZXZpY2UgbGFuZ3VhZ2UuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXREZXZpY2VMYW5ndWFnZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGxhbmd1YWdlO1xuICBpZiAoYXdhaXQgdGhpcy5nZXRBcGlMZXZlbCgpIDwgMjMpIHtcbiAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlU3lzTGFuZ3VhZ2UoKTtcbiAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUHJvZHVjdExhbmd1YWdlKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxhbmd1YWdlID0gKGF3YWl0IHRoaXMuZ2V0RGV2aWNlTG9jYWxlKCkpLnNwbGl0KFwiLVwiKVswXTtcbiAgfVxuICByZXR1cm4gbGFuZ3VhZ2U7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbGFuZ3VhZ2UgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIC0gVGhlIG5hbWUgb2YgdGhlIG5ldyBkZXZpY2UgbGFuZ3VhZ2UuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VMYW5ndWFnZSA9IGFzeW5jIGZ1bmN0aW9uIChsYW5ndWFnZSkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJIDwgMjNcbiAgYXdhaXQgdGhpcy5zZXREZXZpY2VTeXNMYW5ndWFnZShsYW5ndWFnZSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgY291bnRyeSBuYW1lIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIGRldmljZSBjb3VudHJ5LlxuICovXG5hcGtVdGlsc01ldGhvZHMuZ2V0RGV2aWNlQ291bnRyeSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGluIEFQSSA8IDIzXG4gIGxldCBjb3VudHJ5ID0gYXdhaXQgdGhpcy5nZXREZXZpY2VTeXNDb3VudHJ5KCk7XG4gIGlmICghY291bnRyeSkge1xuICAgIGNvdW50cnkgPSBhd2FpdCB0aGlzLmdldERldmljZVByb2R1Y3RDb3VudHJ5KCk7XG4gIH1cbiAgcmV0dXJuIGNvdW50cnk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgY291bnRyeSBuYW1lIG9mIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY291bnRyeSAtIFRoZSBuYW1lIG9mIHRoZSBuZXcgZGV2aWNlIGNvdW50cnkuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VDb3VudHJ5ID0gYXN5bmMgZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGluIEFQSSA8IDIzXG4gIGF3YWl0IHRoaXMuc2V0RGV2aWNlU3lzQ291bnRyeShjb3VudHJ5KTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBsb2NhbGUgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiBkZXZpY2UgbG9jYWxlLlxuICovXG5hcGtVdGlsc01ldGhvZHMuZ2V0RGV2aWNlTG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJID49IDIzXG4gIGxldCBsb2NhbGUgPSBhd2FpdCB0aGlzLmdldERldmljZVN5c0xvY2FsZSgpO1xuICBpZiAoIWxvY2FsZSkge1xuICAgIGxvY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUHJvZHVjdExvY2FsZSgpO1xuICB9XG4gIHJldHVybiBsb2NhbGU7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbG9jYWxlIG5hbWUgb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0IGFuZCB0aGUgZm9ybWF0IG9mIHRoZSBsb2NhbGUgaXMgZW4tVVMsIGZvciBleGFtcGxlLlxuICogVGhpcyBtZXRob2QgY2FsbCBzZXREZXZpY2VMYW5ndWFnZUNvdW50cnksIHNvLCBwbGVhc2UgdXNlIHNldERldmljZUxhbmd1YWdlQ291bnRyeSBhcyBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIC0gTmFtZXMgb2YgdGhlIGRldmljZSBsYW5ndWFnZSBhbmQgdGhlIGNvdW50cnkgY29ubmVjdGVkIHdpdGggYC1gLiBlLmcuIGVuLVVTLlxuICovXG5hcGtVdGlsc01ldGhvZHMuc2V0RGV2aWNlTG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gKGxvY2FsZSkge1xuICBjb25zdCB2YWxpZGF0ZUxvY2FsZSA9IG5ldyBSZWdFeHAoL1thLXpBLVpdKy1bYS16QS1aMC05XSsvKTtcbiAgaWYgKCF2YWxpZGF0ZUxvY2FsZS50ZXN0KGxvY2FsZSkpIHtcbiAgICBsb2cud2Fybihgc2V0RGV2aWNlTG9jYWxlIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgZm9ybWF0OiBlbi1VUyBvciBqYS1KUGApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBzcGxpdF9sb2NhbGUgPSBsb2NhbGUuc3BsaXQoXCItXCIpO1xuICBhd2FpdCB0aGlzLnNldERldmljZUxhbmd1YWdlQ291bnRyeShzcGxpdF9sb2NhbGVbMF0sIHNwbGl0X2xvY2FsZVsxXSk7XG59O1xuXG4vKipcbiAqIE1ha2Ugc3VyZSBjdXJyZW50IGRldmljZSBsb2NhbGUgaXMgZXhwZWN0ZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSAtIExhbmd1YWdlLiBUaGUgbGFuZ3VhZ2UgZmllbGQgaXMgY2FzZSBpbnNlbnNpdGl2ZSwgYnV0IExvY2FsZSBhbHdheXMgY2Fub25pY2FsaXplcyB0byBsb3dlciBjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvdW50cnkgLSBDb3VudHJ5LiBUaGUgbGFuZ3VhZ2UgZmllbGQgaXMgY2FzZSBpbnNlbnNpdGl2ZSwgYnV0IExvY2FsZSBhbHdheXMgY2Fub25pY2FsaXplcyB0byBsb3dlciBjYXNlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IElmIGN1cnJlbnQgbG9jYWxlIGlzIGxhbmd1YWdlIGFuZCBjb3VudHJ5IGFzIGFyZ3VtZW50cywgcmV0dXJuIHRydWUuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5lbnN1cmVDdXJyZW50TG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlLCBjb3VudHJ5KSB7XG4gIGNvbnN0IGhhc0xhbmd1YWdlID0gXy5pc1N0cmluZyhsYW5ndWFnZSk7XG4gIGNvbnN0IGhhc0NvdW50cnkgPSBfLmlzU3RyaW5nKGNvdW50cnkpO1xuXG4gIGlmICghaGFzTGFuZ3VhZ2UgJiYgIWhhc0NvdW50cnkpIHtcbiAgICBsb2cud2FybignZW5zdXJlQ3VycmVudExvY2FsZSByZXF1aXJlcyBsYW5ndWFnZSBvciBjb3VudHJ5Jyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gZ2V0IGxvd2VyIGNhc2UgdmVyc2lvbnMgb2YgdGhlIHN0cmluZ3NcbiAgbGFuZ3VhZ2UgPSAobGFuZ3VhZ2UgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gIGNvdW50cnkgPSAoY291bnRyeSB8fCAnJykudG9Mb3dlckNhc2UoKTtcblxuICBjb25zdCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKTtcblxuICByZXR1cm4gYXdhaXQgcmV0cnlJbnRlcnZhbCg1LCAxMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChhcGlMZXZlbCA8IDIzKSB7XG4gICAgICAgIGxldCBjdXJMYW5ndWFnZSwgY3VyQ291bnRyeTtcbiAgICAgICAgaWYgKGhhc0xhbmd1YWdlKSB7XG4gICAgICAgICAgY3VyTGFuZ3VhZ2UgPSAoYXdhaXQgdGhpcy5nZXREZXZpY2VMYW5ndWFnZSgpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmICghaGFzQ291bnRyeSAmJiBsYW5ndWFnZSA9PT0gY3VyTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQ291bnRyeSkge1xuICAgICAgICAgIGN1ckNvdW50cnkgPSAoYXdhaXQgdGhpcy5nZXREZXZpY2VDb3VudHJ5KCkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKCFoYXNMYW5ndWFnZSAmJiBjb3VudHJ5ID09PSBjdXJDb3VudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSBjdXJMYW5ndWFnZSAmJiBjb3VudHJ5ID09PSBjdXJDb3VudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGN1ckxvY2FsZSA9IChhd2FpdCB0aGlzLmdldERldmljZUxvY2FsZSgpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoYCR7bGFuZ3VhZ2V9LSR7Y291bnRyeX1gID09PSBjdXJMb2NhbGUpICB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGlmIHRoZXJlIGhhcyBiZWVuIGFuIGVycm9yLCByZXN0YXJ0IGFkYiBhbmQgcmV0cnlcbiAgICAgIGxvZy5lcnJvcihgVW5hYmxlIHRvIGNoZWNrIGRldmljZSBsb2NhbGl6YXRpb246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBsb2cuZGVidWcoJ1Jlc3RhcnRpbmcgQURCIGFuZCByZXRyeWluZy4uLicpO1xuICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0QWRiKCk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBsb2NhbGUgbmFtZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIC0gTGFuZ3VhZ2UuIFRoZSBsYW5ndWFnZSBmaWVsZCBpcyBjYXNlIGluc2Vuc2l0aXZlLCBidXQgTG9jYWxlIGFsd2F5cyBjYW5vbmljYWxpemVzIHRvIGxvd2VyIGNhc2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFthLXpBLVpdezIsOH0uIGUuZy4gZW4sIGphIDogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9Mb2NhbGUuaHRtbFxuICogQHBhcmFtIHtzdHJpbmd9IGNvdW50cnkgLSBDb3VudHJ5LiBUaGUgY291bnRyeSAocmVnaW9uKSBmaWVsZCBpcyBjYXNlIGluc2Vuc2l0aXZlLCBidXQgTG9jYWxlIGFsd2F5cyBjYW5vbmljYWxpemVzIHRvIHVwcGVyIGNhc2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFthLXpBLVpdezJ9IHwgWzAtOV17M30uIGUuZy4gVVMsIEpQIDogaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9Mb2NhbGUuaHRtbFxuICovXG5hcGtVdGlsc01ldGhvZHMuc2V0RGV2aWNlTGFuZ3VhZ2VDb3VudHJ5ID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlLCBjb3VudHJ5KSB7XG4gIGxldCBoYXNMYW5ndWFnZSA9IGxhbmd1YWdlICYmIF8uaXNTdHJpbmcobGFuZ3VhZ2UpO1xuICBsZXQgaGFzQ291bnRyeSA9IGNvdW50cnkgJiYgXy5pc1N0cmluZyhjb3VudHJ5KTtcbiAgaWYgKCFoYXNMYW5ndWFnZSAmJiAhaGFzQ291bnRyeSkge1xuICAgIGxvZy53YXJuKGBzZXREZXZpY2VMYW5ndWFnZUNvdW50cnkgcmVxdWlyZXMgbGFuZ3VhZ2Ugb3IgY291bnRyeS5gKTtcbiAgICBsb2cud2FybihgR290IGxhbmd1YWdlOiAnJHtsYW5ndWFnZX0nIGFuZCBjb3VudHJ5OiAnJHtjb3VudHJ5fSdgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHdhc1NldHRpbmdDaGFuZ2VkID0gZmFsc2U7XG4gIGxldCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKTtcblxuICBsYW5ndWFnZSA9IChsYW5ndWFnZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgY291bnRyeSA9IChjb3VudHJ5IHx8ICcnKS50b1VwcGVyQ2FzZSgpO1xuXG4gIGlmIChhcGlMZXZlbCA8IDIzKSB7XG4gICAgbGV0IGN1ckxhbmd1YWdlID0gKGF3YWl0IHRoaXMuZ2V0RGV2aWNlTGFuZ3VhZ2UoKSkudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgY3VyQ291bnRyeSA9IChhd2FpdCB0aGlzLmdldERldmljZUNvdW50cnkoKSkudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoaGFzTGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UgIT09IGN1ckxhbmd1YWdlKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldERldmljZUxhbmd1YWdlKGxhbmd1YWdlKTtcbiAgICAgIHdhc1NldHRpbmdDaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGhhc0NvdW50cnkgJiYgY291bnRyeSAhPT0gY3VyQ291bnRyeSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXREZXZpY2VDb3VudHJ5KGNvdW50cnkpO1xuICAgICAgd2FzU2V0dGluZ0NoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgY3VyTG9jYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VMb2NhbGUoKTtcblxuICAgIGlmIChhcGlMZXZlbCA9PT0gMjMpIHtcbiAgICAgIGxldCBsb2NhbGU7XG4gICAgICBpZiAoIWhhc0NvdW50cnkpIHtcbiAgICAgICAgbG9jYWxlID0gbGFuZ3VhZ2U7XG4gICAgICB9IGVsc2UgaWYgKCFoYXNMYW5ndWFnZSkge1xuICAgICAgICBsb2NhbGUgPSBjb3VudHJ5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYWxlID0gYCR7bGFuZ3VhZ2V9LSR7Y291bnRyeX1gO1xuICAgICAgfVxuXG4gICAgICBsb2cuZGVidWcoYEN1cnJlbnQgbG9jYWxlOiAnJHtjdXJMb2NhbGV9JzsgcmVxdWVzdGVkIGxvY2FsZTogJyR7bG9jYWxlfSdgKTtcbiAgICAgIGlmIChsb2NhbGUudG9Mb3dlckNhc2UoKSAhPT0gY3VyTG9jYWxlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXREZXZpY2VTeXNMb2NhbGUobG9jYWxlKTtcbiAgICAgICAgd2FzU2V0dGluZ0NoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIEFQSSA+PSAyNFxuICAgICAgaWYgKCFoYXNDb3VudHJ5IHx8ICFoYXNMYW5ndWFnZSkge1xuICAgICAgICBsb2cud2Fybihgc2V0RGV2aWNlTGFuZ3VhZ2VDb3VudHJ5IHJlcXVpcmVzIGJvdGggbGFuZ3VhZ2UgYW5kIGNvdW50cnkgdG8gYmUgc2V0IGZvciBBUEkgMjQrYCk7XG4gICAgICAgIGxvZy53YXJuKGBHb3QgbGFuZ3VhZ2U6ICcke2xhbmd1YWdlfScgYW5kIGNvdW50cnk6ICcke2NvdW50cnl9J2ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvZy5kZWJ1ZyhgQ3VycmVudCBsb2NhbGU6ICcke2N1ckxvY2FsZX0nOyByZXF1ZXN0ZWQgbG9jYWxlOiAnJHtsYW5ndWFnZX0tJHtjb3VudHJ5fSdgKTtcbiAgICAgIGlmIChgJHtsYW5ndWFnZX0tJHtjb3VudHJ5fWAudG9Mb3dlckNhc2UoKSAhPT0gY3VyTG9jYWxlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXREZXZpY2VTeXNMb2NhbGVWaWFTZXR0aW5nQXBwKGxhbmd1YWdlLCBjb3VudHJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAod2FzU2V0dGluZ0NoYW5nZWQpIHtcbiAgICBsb2cuaW5mbyhcIlJlYm9vdGluZyB0aGUgZGV2aWNlIGluIG9yZGVyIHRvIGFwcGx5IG5ldyBsb2NhbGUgdmlhICdzZXR0aW5nIHBlcnNpc3Quc3lzLmxvY2FsZScgY29tbWFuZC5cIik7XG4gICAgYXdhaXQgdGhpcy5yZWJvb3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIHBhY2thZ2UgbmFtZSBmcm9tIGxvY2FsIGFwayBmaWxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGsgLSBUaGUgZnVsbCBwYXRoIHRvIGV4aXN0aW5nIC5hcGsgcGFja2FnZSBvbiB0aGUgbG9jYWxcbiAqICAgICAgICAgICAgICAgICAgICAgICBmaWxlIHN5c3RlbS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhcnNlZCBwYWNrYWdlIG5hbWUgb3IgX251bGxfIGlmIGl0IGNhbm5vdCBiZSBwYXJzZWQuXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRQYWNrYWdlTmFtZSA9IGFzeW5jIGZ1bmN0aW9uIChhcGspIHtcbiAgbGV0IGFyZ3MgPSBbJ2R1bXAnLCAnYmFkZ2luZycsIGFwa107XG4gIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcbiAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmJpbmFyaWVzLmFhcHQsIGFyZ3MpO1xuICBsZXQgYXBrUGFja2FnZSA9IG5ldyBSZWdFeHAoL3BhY2thZ2U6IG5hbWU9JyhbXiddKyknL2cpLmV4ZWMoc3Rkb3V0KTtcbiAgaWYgKGFwa1BhY2thZ2UgJiYgYXBrUGFja2FnZS5sZW5ndGggPj0gMikge1xuICAgIGFwa1BhY2thZ2UgPSBhcGtQYWNrYWdlWzFdO1xuICB9IGVsc2Uge1xuICAgIGFwa1BhY2thZ2UgPSBudWxsO1xuICB9XG4gIHJldHVybiBhcGtQYWNrYWdlO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqY2V0fSBBcHBJbmZvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSAtIFBhY2thZ2UgbmFtZSwgZm9yIGV4YW1wbGUgJ2NvbS5hY21lLmFwcCcuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdmVyc2lvbkNvZGUgLSBWZXJzaW9uIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmVyc2lvbk5hbWUgLSBWZXJzaW9uIG5hbWUsIGZvciBleGFtcGxlICcxLjAnLlxuICovXG5cbi8qKlxuICogR2V0IHRoZSBwYWNrYWdlIGluZm8gZnJvbSBsb2NhbCBhcGsgZmlsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBrUGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gZXhpc3RpbmcgLmFwayBwYWNrYWdlIG9uIHRoZSBsb2NhbFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlIHN5c3RlbS5cbiAqIEByZXR1cm4gez9BcHBJbmZvfSBUaGUgcGFyc2VkIGFwcGxpY2F0aW9uIGluZm9ybWF0aW9uLlxuICovXG5hcGtVdGlsc01ldGhvZHMuZ2V0QXBrSW5mbyA9IGFzeW5jIGZ1bmN0aW9uIChhcGtQYXRoKSB7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKGFwa1BhdGgpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZSBmaWxlIGF0IHBhdGggJHthcGtQYXRofSBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgYWNjZXNzaWJsZWApO1xuICB9XG4gIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0LCBbJ2QnLCAnYmFkZ2luZycsIGFwa1BhdGhdKTtcbiAgICBjb25zdCBtYXRjaGVzID0gbmV3IFJlZ0V4cCgvcGFja2FnZTogbmFtZT0nKFteJ10rKScgdmVyc2lvbkNvZGU9JyhcXGQrKScgdmVyc2lvbk5hbWU9JyhbXiddKyknLykuZXhlYyhzdGRvdXQpO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBtYXRjaGVzWzFdLFxuICAgICAgICB2ZXJzaW9uQ29kZTogcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApLFxuICAgICAgICB2ZXJzaW9uTmFtZTogbWF0Y2hlc1szXVxuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy53YXJuKGBFcnJvciBcIiR7ZXJyLm1lc3NhZ2V9XCIgd2hpbGUgZ2V0dGluZyBiYWRnaW5nIGluZm9gKTtcbiAgfVxuICByZXR1cm4ge307XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcGFja2FnZSBpbmZvIGZyb20gdGhlIGluc3RhbGxlZCBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnIC0gVGhlIG5hbWUgb2YgdGhlIGluc3RhbGxlZCBwYWNrYWdlLlxuICogQHJldHVybiB7P0FwcEluZm99IFRoZSBwYXJzZWQgYXBwbGljYXRpb24gaW5mb3JtYXRpb24uXG4gKi9cbmFwa1V0aWxzTWV0aG9kcy5nZXRQYWNrYWdlSW5mbyA9IGFzeW5jIGZ1bmN0aW9uIChwa2cpIHtcbiAgbG9nLmRlYnVnKGBHZXR0aW5nIHBhY2thZ2UgaW5mbyBmb3IgJHtwa2d9YCk7XG4gIGxldCByZXN1bHQgPSB7bmFtZTogcGtnfTtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFsnZHVtcHN5cycsICdwYWNrYWdlJywgcGtnXSk7XG4gICAgY29uc3QgdmVyc2lvbk5hbWVNYXRjaCA9IG5ldyBSZWdFeHAoL3ZlcnNpb25OYW1lPShbXFxkK1xcLl0rKS8pLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAodmVyc2lvbk5hbWVNYXRjaCkge1xuICAgICAgcmVzdWx0LnZlcnNpb25OYW1lID0gdmVyc2lvbk5hbWVNYXRjaFsxXTtcbiAgICB9XG4gICAgY29uc3QgdmVyc2lvbkNvZGVNYXRjaCA9IG5ldyBSZWdFeHAoL3ZlcnNpb25Db2RlPShcXGQrKS8pLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAodmVyc2lvbkNvZGVNYXRjaCkge1xuICAgICAgcmVzdWx0LnZlcnNpb25Db2RlID0gcGFyc2VJbnQodmVyc2lvbkNvZGVNYXRjaFsxXSwgMTApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgRXJyb3IgXCIke2Vyci5tZXNzYWdlfVwiIHdoaWxlIGR1bXBpbmcgcGFja2FnZSBpbmZvYCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwa1V0aWxzTWV0aG9kcztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
