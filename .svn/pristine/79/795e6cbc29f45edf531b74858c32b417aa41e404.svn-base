'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _loggerJs = require('./logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _teen_process = require('teen_process');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..');
var androidPlatforms = ['android-4.2', 'android-17', 'android-4.3', 'android-18', 'android-4.4', 'android-19', 'android-L', 'android-20', 'android-5.0', 'android-21', 'android-22', 'android-MNC', 'android-23', 'android-6.0', 'android-N', 'android-24', 'android-25'];

function getAndroidPlatformAndPath() {
  var androidHome, platforms, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, platform, platformPath;

  return _regeneratorRuntime.async(function getAndroidPlatformAndPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        androidHome = process.env.ANDROID_HOME;

        if (!_lodash2['default'].isString(androidHome)) {
          _loggerJs2['default'].errorAndThrow("ANDROID_HOME environment variable was not exported");
        }

        // get the latest platform and path
        platforms = _path2['default'].resolve(androidHome, 'platforms');
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 6;
        _iterator = _getIterator(_lodash2['default'].clone(androidPlatforms).reverse());

      case 8:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 18;
          break;
        }

        platform = _step.value;
        platformPath = _path2['default'].resolve(platforms, platform);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(platformPath));

      case 13:
        if (!context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', { platform: platform, platformPath: platformPath });

      case 15:
        _iteratorNormalCompletion = true;
        context$1$0.next = 8;
        break;

      case 18:
        context$1$0.next = 24;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 24:
        context$1$0.prev = 24;
        context$1$0.prev = 25;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 27:
        context$1$0.prev = 27;

        if (!_didIteratorError) {
          context$1$0.next = 30;
          break;
        }

        throw _iteratorError;

      case 30:
        return context$1$0.finish(27);

      case 31:
        return context$1$0.finish(24);

      case 32:
        return context$1$0.abrupt('return', { platform: null, platformPath: null });

      case 33:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 20, 24, 32], [25,, 27, 31]]);
}

function unzipFile(zipPath) {
  return _regeneratorRuntime.async(function unzipFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Unzipping ' + zipPath);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(assertZipArchive(zipPath));

      case 4:
        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(zipPath, _path2['default'].dirname(zipPath)));

      case 7:
        _loggerJs2['default'].debug("Unzip successful");
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-o', zipPath], { cwd: _path2['default'].dirname(zipPath) }));

      case 12:
        _loggerJs2['default'].debug("Unzip successful");

      case 13:
        context$1$0.next = 18;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('Error occurred while unzipping. Original error: ' + context$1$0.t0.message);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 15]]);
}

function assertZipArchive(zipPath) {
  var execOpts;
  return _regeneratorRuntime.async(function assertZipArchive$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Testing zip archive: \'' + zipPath + '\'');

        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(zipPath));

      case 4:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _loggerJs2['default'].debug("Zip archive tested clean");
        context$1$0.next = 9;
        break;

      case 8:
        throw new Error('Zip archive not present at ' + zipPath);

      case 9:
        context$1$0.next = 22;
        break;

      case 11:
        execOpts = { cwd: _path2['default'].dirname(zipPath) };
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-tqv', zipPath], execOpts));

      case 15:
        context$1$0.next = 22;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](12);

        if (!(context$1$0.t0.message.indexOf('code 2') === -1)) {
          context$1$0.next = 21;
          break;
        }

        throw context$1$0.t0;

      case 21:
        _loggerJs2['default'].warn('Test failed with recoverable error. Continuing.');

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[12, 17]]);
}

function getIMEListFromOutput(stdout) {
  var engines = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(stdout.split('\n')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var line = _step2.value;

      if (line.length > 0 && line[0] !== ' ') {
        // remove newline and trailing colon, and add to the list
        engines.push(line.trim().replace(/:$/, ''));
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return engines;
}

var getJavaForOs = _lodash2['default'].memoize(function () {
  return _path2['default'].resolve(getJavaHome(), 'bin', 'java' + (_appiumSupport.system.isWindows() ? '.exe' : ''));
});

function getJavaHome() {
  if (process.env.JAVA_HOME) {
    return process.env.JAVA_HOME;
  }
  throw new Error("JAVA_HOME is not set currently. Please set JAVA_HOME.");
}

/**
 * Get the absolute path to apksigner tool
 *
 * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods
 * @returns {string} An absolute path to apksigner tool.
 * @throws {Error} If the tool is not present on the local file system.
 */
function getApksignerForOs(sysHelpers) {
  return _regeneratorRuntime.async(function getApksignerForOs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sysHelpers.getBinaryFromSdkRoot('apksigner'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Get the absolute path to apkanalyzer tool.
 * https://developer.android.com/studio/command-line/apkanalyzer.html
 *
 * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods
 * @returns {string} An absolute path to apkanalyzer tool.
 * @throws {Error} If the tool is not present on the local file system.
 */
function getApkanalyzerForOs(sysHelpers) {
  return _regeneratorRuntime.async(function getApkanalyzerForOs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sysHelpers.getBinaryFromSdkRoot('apkanalyzer'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Checks mShowingLockscreen or mDreamingLockscreen in dumpsys output to determine
 * if lock screen is showing
 *
 * @param {string} dumpsys - The output of dumpsys window command.
 * @return {boolean} True if lock screen is showing.
 */
function isShowingLockscreen(dumpsys) {
  return (/(mShowingLockscreen=true|mDreamingLockscreen=true)/gi.test(dumpsys)
  );
}

/*
 * Checks mCurrentFocus in dumpsys output to determine if Keyguard is activated
 */
function isCurrentFocusOnKeyguard(dumpsys) {
  var m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);
  return m && m.length && m[0] ? true : false;
}

/*
 * Reads SurfaceOrientation in dumpsys output
 */
function getSurfaceOrientation(dumpsys) {
  var m = /SurfaceOrientation: \d/gi.exec(dumpsys);
  return m && parseInt(m[0].split(':')[1], 10);
}

/*
 * Checks mScreenOnFully in dumpsys output to determine if screen is showing
 * Default is true
 */
function isScreenOnFully(dumpsys) {
  var m = /mScreenOnFully=\w+/gi.exec(dumpsys);
  return !m || // if information is missing we assume screen is fully on
  m && m.length > 0 && m[0].split('=')[1] === 'true' || false;
}

function buildStartCmd(startAppOptions, apiLevel) {
  var cmd = ['am', 'start', '-W', '-n', startAppOptions.pkg + '/' + startAppOptions.activity];
  if (startAppOptions.stopApp && apiLevel >= 15) {
    cmd.push('-S');
  }
  if (startAppOptions.action) {
    cmd.push('-a', startAppOptions.action);
  }
  if (startAppOptions.category) {
    cmd.push('-c', startAppOptions.category);
  }
  if (startAppOptions.flags) {
    cmd.push('-f', startAppOptions.flags);
  }
  if (startAppOptions.optionalIntentArguments) {
    // expect optionalIntentArguments to be a single string of the form:
    //     "-flag key"
    //     "-flag key value"
    // or a combination of these (e.g., "-flag1 key1 -flag2 key2 value2")

    // take a string and parse out the part before any spaces, and anything after
    // the first space
    var parseKeyValue = function parseKeyValue(str) {
      str = str.trim();
      var space = str.indexOf(' ');
      if (space === -1) {
        return str.length ? [str] : [];
      } else {
        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];
      }
    };

    // cycle through the optionalIntentArguments and pull out the arguments
    // add a space initially so flags can be distinguished from arguments that
    // have internal hyphens
    var optionalIntentArguments = ' ' + startAppOptions.optionalIntentArguments;
    var re = / (-[^\s]+) (.+)/;
    while (true) {
      // eslint-disable-line no-constant-condition
      var args = re.exec(optionalIntentArguments);
      if (!args) {
        if (optionalIntentArguments.length) {
          // no more flags, so the remainder can be treated as 'key' or 'key value'
          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));
        }
        // we are done
        break;
      }

      // take the flag and see if it is at the beginning of the string
      // if it is not, then it means we have been through already, and
      // what is before the flag is the argument for the previous flag
      var flag = args[1];
      var flagPos = optionalIntentArguments.indexOf(flag);
      if (flagPos !== 0) {
        var prevArgs = optionalIntentArguments.substring(0, flagPos);
        cmd.push.apply(cmd, parseKeyValue(prevArgs));
      }

      // add the flag, as there are no more earlier arguments
      cmd.push(flag);

      // make optionalIntentArguments hold the remainder
      optionalIntentArguments = args[2];
    }
  }
  return cmd;
}

var getSdkToolsVersion = _lodash2['default'].memoize(function getSdkToolsVersion() {
  var androidHome, propertiesPath, propertiesContent, versionMatcher, match;
  return _regeneratorRuntime.async(function getSdkToolsVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        androidHome = process.env.ANDROID_HOME;

        if (!androidHome) {
          _loggerJs2['default'].errorAndThrow('ANDROID_HOME environment varibale is expected to be set');
        }
        propertiesPath = _path2['default'].resolve(androidHome, 'tools', 'source.properties');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(propertiesPath));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _loggerJs2['default'].warn('Cannot find ' + propertiesPath + ' file to read SDK version from');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(propertiesPath, 'utf8'));

      case 10:
        propertiesContent = context$1$0.sent;
        versionMatcher = new RegExp(/Pkg\.Revision=(\d+)\.?(\d+)?\.?(\d+)?/);
        match = versionMatcher.exec(propertiesContent);

        if (!match) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', {
          major: parseInt(match[1], 10),
          minor: match[2] ? parseInt(match[2], 10) : 0,
          build: match[3] ? parseInt(match[3], 10) : 0
        });

      case 15:
        _loggerJs2['default'].warn('Cannot parse "Pkg.Revision" value from ' + propertiesPath);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});

/**
 * Retrieves full paths to all 'build-tools' subfolders under the particular
 * SDK root folder
 *
 * @param {string} sdkRoot - The full path to the Android SDK root folder
 * @returns {Array<string>} The full paths to the resulting folders sorted by
 * modification date (the newest comes first) or an empty list if no macthes were found
 */
var getBuildToolsDirs = _lodash2['default'].memoize(function getBuildToolsDirs(sdkRoot) {
  var buildToolsDirs, pairs, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, dir;

  return _regeneratorRuntime.async(function getBuildToolsDirs$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(_path2['default'].resolve(sdkRoot, 'build-tools', '*'), { absolute: true }));

      case 2:
        buildToolsDirs = context$1$0.sent;
        context$1$0.prev = 3;

        buildToolsDirs = buildToolsDirs.map(function (dir) {
          return [_path2['default'].basename(dir), dir];
        }).sort(function (a, b) {
          return _semver2['default'].rcompare(a[0], b[0]);
        }).map(function (pair) {
          return pair[1];
        });
        context$1$0.next = 15;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](3);

        _loggerJs2['default'].warn('Cannot sort build-tools folders ' + JSON.stringify(buildToolsDirs.map(function (dir) {
          return _path2['default'].basename(dir);
        })) + ' ' + 'by semantic version names.');
        _loggerJs2['default'].warn('Falling back to sorting by modification date. Original error: ' + context$1$0.t0.message);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_bluebird2['default'].map(buildToolsDirs, function callee$2$0(dir) {
          return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
            while (1) switch (context$3$0.prev = context$3$0.next) {
              case 0:
                context$3$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(dir));

              case 2:
                context$3$0.t0 = context$3$0.sent.mtime.valueOf();
                context$3$0.t1 = dir;
                return context$3$0.abrupt('return', [context$3$0.t0, context$3$0.t1]);

              case 5:
              case 'end':
                return context$3$0.stop();
            }
          }, null, _this);
        }));

      case 13:
        pairs = context$1$0.sent;

        buildToolsDirs = pairs.sort(function (a, b) {
          return a[0] < b[0];
        }).map(function (pair) {
          return pair[1];
        });

      case 15:
        _loggerJs2['default'].info('Found ' + buildToolsDirs.length + ' \'build-tools\' folders under \'' + sdkRoot + '\' (newest first):');
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 19;
        for (_iterator3 = _getIterator(buildToolsDirs); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          dir = _step3.value;

          _loggerJs2['default'].info('    ' + dir);
        }
        context$1$0.next = 27;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](19);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t1;

      case 27:
        context$1$0.prev = 27;
        context$1$0.prev = 28;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 30:
        context$1$0.prev = 30;

        if (!_didIteratorError3) {
          context$1$0.next = 33;
          break;
        }

        throw _iteratorError3;

      case 33:
        return context$1$0.finish(30);

      case 34:
        return context$1$0.finish(27);

      case 35:
        return context$1$0.abrupt('return', buildToolsDirs);

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 7], [19, 23, 27, 35], [28,, 30, 34]]);
});

exports.getAndroidPlatformAndPath = getAndroidPlatformAndPath;
exports.unzipFile = unzipFile;
exports.assertZipArchive = assertZipArchive;
exports.getIMEListFromOutput = getIMEListFromOutput;
exports.getJavaForOs = getJavaForOs;
exports.isShowingLockscreen = isShowingLockscreen;
exports.isCurrentFocusOnKeyguard = isCurrentFocusOnKeyguard;
exports.getSurfaceOrientation = getSurfaceOrientation;
exports.isScreenOnFully = isScreenOnFully;
exports.buildStartCmd = buildStartCmd;
exports.getJavaHome = getJavaHome;
exports.rootDir = rootDir;
exports.androidPlatforms = androidPlatforms;
exports.getSdkToolsVersion = getSdkToolsVersion;
exports.getApksignerForOs = getApksignerForOs;
exports.getBuildToolsDirs = getBuildToolsDirs;
exports.getApkanalyzerForOs = getApkanalyzerForOs;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
